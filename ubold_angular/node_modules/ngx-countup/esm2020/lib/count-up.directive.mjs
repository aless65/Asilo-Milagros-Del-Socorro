import { Directive, Input, Output, HostListener, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';
import { CountUp } from 'countup.js';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
export class CountUpDirective {
    constructor(el, zone, platformId) {
        this.el = el;
        this.zone = zone;
        this.platformId = platformId;
        this.options = {};
        this.reanimateOnClick = true;
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.complete = new EventEmitter();
    }
    // Re-animate if preference is set.
    onClick() {
        if (this.reanimateOnClick) {
            this.animate();
        }
    }
    ngOnChanges(changes) {
        // don't animate server-side (universal)
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        if (changes.endVal && changes.endVal.currentValue !== undefined) {
            if (this.previousEndVal !== undefined) {
                this.options = {
                    ...this.options,
                    startVal: this.previousEndVal
                };
            }
            this.countUp = new CountUp(this.el.nativeElement, this.endVal, this.options);
            this.animate();
            this.previousEndVal = this.endVal;
        }
    }
    animate() {
        this.zone.runOutsideAngular(() => {
            this.countUp.reset();
            this.countUp.start(() => {
                this.zone.run(() => {
                    this.complete.emit();
                });
            });
        });
    }
}
CountUpDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: CountUpDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });
CountUpDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.2", type: CountUpDirective, selector: "[countUp]", inputs: { endVal: ["countUp", "endVal"], options: "options", reanimateOnClick: "reanimateOnClick" }, outputs: { complete: "complete" }, host: { listeners: { "click": "onClick()" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: CountUpDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[countUp]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { endVal: [{
                type: Input,
                args: ['countUp']
            }], options: [{
                type: Input
            }], reanimateOnClick: [{
                type: Input
            }], complete: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQtdXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY291bnQtdXAvc3JjL2xpYi9jb3VudC11cC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixZQUFZLEVBR0osTUFBTSxFQUFFLFdBQVcsRUFDNUIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBa0IsTUFBTSxZQUFZLENBQUM7QUFDckQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBS2xELE1BQU0sT0FBTyxnQkFBZ0I7SUFzQjNCLFlBQ1UsRUFBYyxFQUNkLElBQVksRUFDUyxVQUFrQjtRQUZ2QyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNTLGVBQVUsR0FBVixVQUFVLENBQVE7UUFoQnhDLFlBQU8sR0FBbUIsRUFBRSxDQUFDO1FBQzdCLHFCQUFnQixHQUFHLElBQUksQ0FBQztRQUNqQyw0REFBNEQ7UUFDbEQsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFjM0MsQ0FBQztJQVpKLG1DQUFtQztJQUVuQyxPQUFPO1FBQ0wsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztJQVFELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyx3Q0FBd0M7UUFDeEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN2QyxPQUFPO1NBQ1I7UUFDRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQy9ELElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxTQUFTLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUc7b0JBQ2IsR0FBRyxJQUFJLENBQUMsT0FBTztvQkFDZixRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWM7aUJBQzlCLENBQUM7YUFDSDtZQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVPLE9BQU87UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN2QixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs2R0F2RFUsZ0JBQWdCLGtFQXlCakIsV0FBVztpR0F6QlYsZ0JBQWdCOzJGQUFoQixnQkFBZ0I7a0JBSDVCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7aUJBQ3RCO3dHQTBCNEMsTUFBTTswQkFBOUMsTUFBTTsyQkFBQyxXQUFXOzRDQXJCSCxNQUFNO3NCQUF2QixLQUFLO3VCQUFDLFNBQVM7Z0JBS1AsT0FBTztzQkFBZixLQUFLO2dCQUNHLGdCQUFnQjtzQkFBeEIsS0FBSztnQkFFSSxRQUFRO3NCQUFqQixNQUFNO2dCQUlQLE9BQU87c0JBRE4sWUFBWTt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBIb3N0TGlzdGVuZXIsXG4gIEV2ZW50RW1pdHRlcixcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBOZ1pvbmUsIEluamVjdCwgUExBVEZPUk1fSURcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3VudFVwLCBDb3VudFVwT3B0aW9ucyB9IGZyb20gJ2NvdW50dXAuanMnO1xuaW1wb3J0IHtpc1BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NvdW50VXBdJ1xufSlcbmV4cG9ydCBjbGFzcyBDb3VudFVwRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICBjb3VudFVwOiBDb3VudFVwO1xuICAvLyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gY291bnQgdG9cbiAgQElucHV0KCdjb3VudFVwJykgZW5kVmFsOiBudW1iZXI7XG4gIC8vIHByZXZpb3VzIGVuZCB2YWwgZW5hYmxlcyB1cyB0byBjb3VudCBmcm9tIGxhc3QgZW5kVmFsXG4gIC8vIHdoZW4gZW5kVmFsIGlzIGNoYW5nZWRcbiAgcHJldmlvdXNFbmRWYWw6IG51bWJlcjtcblxuICBASW5wdXQoKSBvcHRpb25zOiBDb3VudFVwT3B0aW9ucyA9IHt9O1xuICBASW5wdXQoKSByZWFuaW1hdGVPbkNsaWNrID0gdHJ1ZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1vdXRwdXQtbmF0aXZlXG4gIEBPdXRwdXQoKSBjb21wbGV0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAvLyBSZS1hbmltYXRlIGlmIHByZWZlcmVuY2UgaXMgc2V0LlxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMucmVhbmltYXRlT25DbGljaykge1xuICAgICAgdGhpcy5hbmltYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHpvbmU6IE5nWm9uZSxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCxcbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAvLyBkb24ndCBhbmltYXRlIHNlcnZlci1zaWRlICh1bml2ZXJzYWwpXG4gICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLmVuZFZhbCAmJiBjaGFuZ2VzLmVuZFZhbC5jdXJyZW50VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHRoaXMucHJldmlvdXNFbmRWYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgIHN0YXJ0VmFsOiB0aGlzLnByZXZpb3VzRW5kVmFsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB0aGlzLmNvdW50VXAgPSBuZXcgQ291bnRVcCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuZW5kVmFsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5hbmltYXRlKCk7XG4gICAgICB0aGlzLnByZXZpb3VzRW5kVmFsID0gdGhpcy5lbmRWYWw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhbmltYXRlKCkge1xuICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLmNvdW50VXAucmVzZXQoKTtcbiAgICAgIHRoaXMuY291bnRVcC5zdGFydCgoKSA9PiB7XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUuZW1pdCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=
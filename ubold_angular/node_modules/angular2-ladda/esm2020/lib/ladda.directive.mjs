import { isPlatformBrowser } from '@angular/common';
import { Directive, Input, Optional, Inject, PLATFORM_ID } from '@angular/core';
import { create as createLadda } from 'ladda';
import { LaddaConfig, configAttributes } from './ladda-config';
import * as i0 from "@angular/core";
import * as i1 from "./ladda-config";
export class LaddaDirective {
    constructor(el, config, platformId) {
        this.platformId = platformId;
        this.ladda = undefined;
        this.disabled = false;
        this.el = el.nativeElement;
        if (!config) {
            return;
        }
        // apply default styles if they aren't overwritten by an attribute
        for (let attribute in configAttributes) {
            let configValue = config[configAttributes[attribute]];
            if (!configValue) {
                continue; // don't waste time reading the attribute
            }
            if (!this.el.getAttribute(attribute)) {
                // attribute isn't set - apply the default config value
                let value = (typeof configValue === "number") ? configValue.toString() : configValue;
                this.el.setAttribute(attribute, value);
            }
        }
    }
    ngOnChanges(changes) {
        if (!this.ladda) {
            return; // needed since ngOnChanges is called before ngOnInit
        }
        if (changes.loading) {
            this.updateLadda(changes.loading.previousValue);
        }
        if (changes.disabled) {
            this.updateDisabled();
        }
    }
    ngOnInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.ladda = createLadda(this.el);
        // if the initial loading value isn't false, a timeout of 0 ms
        // is necessary for the calculated spinner size to be correct.
        setTimeout(() => { this.updateLadda(false); }, 0);
    }
    ngOnDestroy() {
        if (this.ladda) {
            this.ladda.remove();
        }
    }
    updateLadda(previousValue) {
        if (!this.ladda) {
            return;
        }
        let loading = typeof this.loading === 'number' || !!this.loading;
        let wasLoading = typeof previousValue === 'number' || !!previousValue;
        if (!loading) {
            if (wasLoading) {
                this.ladda.stop();
            }
            return this.updateDisabled();
        }
        if (!wasLoading) {
            this.ladda.start();
        }
        if (typeof this.loading === 'number') {
            this.ladda.setProgress(this.loading);
        }
    }
    updateDisabled() {
        this.el.disabled = this.disabled;
    }
}
LaddaDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: LaddaDirective, deps: [{ token: i0.ElementRef }, { token: LaddaConfig, optional: true }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });
LaddaDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.3", type: LaddaDirective, selector: "[ladda]", inputs: { loading: ["ladda", "loading"], disabled: "disabled" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: LaddaDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ladda]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.LaddaConfigArgs, decorators: [{
                    type: Inject,
                    args: [LaddaConfig]
                }, {
                    type: Optional
                }] }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { loading: [{
                type: Input,
                args: ['ladda']
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFkZGEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbGFkZGEvc3JjL2xpYi9sYWRkYS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDbEQsT0FBTyxFQUFDLFNBQVMsRUFBYyxLQUFLLEVBQStDLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZJLE9BQU8sRUFBQyxNQUFNLElBQUksV0FBVyxFQUFjLE1BQU0sT0FBTyxDQUFDO0FBQ3pELE9BQU8sRUFBQyxXQUFXLEVBQW1CLGdCQUFnQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7OztBQU85RSxNQUFNLE9BQU8sY0FBYztJQU92QixZQUNJLEVBQWMsRUFDbUIsTUFBdUIsRUFDM0IsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQVIzQyxVQUFLLEdBQTRCLFNBQVMsQ0FBQztRQUcxQyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBT3RCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUUzQixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsT0FBTztTQUNWO1FBRUQsa0VBQWtFO1FBQ2xFLEtBQUssSUFBSSxTQUFTLElBQUksZ0JBQWdCLEVBQUU7WUFDcEMsSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFFdEQsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDZCxTQUFTLENBQUMseUNBQXlDO2FBQ3REO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNsQyx1REFBdUQ7Z0JBQ3ZELElBQUksS0FBSyxHQUFHLENBQUMsT0FBTyxXQUFXLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO2dCQUNyRixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDMUM7U0FDSjtJQUNMLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDYixPQUFPLENBQUMscURBQXFEO1NBQ2hFO1FBRUQsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNuRDtRQUVELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDekI7SUFDTCxDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDckMsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWxDLDhEQUE4RDtRQUM5RCw4REFBOEQ7UUFDOUQsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQztJQUVPLFdBQVcsQ0FBQyxhQUF5QjtRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNiLE9BQU87U0FDVjtRQUVELElBQUksT0FBTyxHQUFZLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDMUUsSUFBSSxVQUFVLEdBQVksT0FBTyxhQUFhLEtBQUssUUFBUSxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFFL0UsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNWLElBQUksVUFBVSxFQUFFO2dCQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckI7WUFFRCxPQUFPLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUNoQztRQUVELElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7SUFFTyxjQUFjO1FBQ2xCLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDckMsQ0FBQzs7MkdBN0ZRLGNBQWMsNENBU1gsV0FBVyw2QkFDWCxXQUFXOytGQVZkLGNBQWM7MkZBQWQsY0FBYztrQkFIMUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsU0FBUztpQkFDdEI7OzBCQVVRLE1BQU07MkJBQUMsV0FBVzs7MEJBQUcsUUFBUTs4QkFDVyxNQUFNOzBCQUE5QyxNQUFNOzJCQUFDLFdBQVc7NENBTlAsT0FBTztzQkFBdEIsS0FBSzt1QkFBQyxPQUFPO2dCQUNMLFFBQVE7c0JBQWhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzUGxhdGZvcm1Ccm93c2VyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIE9wdGlvbmFsLCBJbmplY3QsIFBMQVRGT1JNX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtjcmVhdGUgYXMgY3JlYXRlTGFkZGEsIExhZGRhQnV0dG9ufSBmcm9tICdsYWRkYSc7XHJcbmltcG9ydCB7TGFkZGFDb25maWcsIExhZGRhQ29uZmlnQXJncywgY29uZmlnQXR0cmlidXRlc30gZnJvbSAnLi9sYWRkYS1jb25maWcnO1xyXG5cclxuZXhwb3J0IHR5cGUgTGFkZGFWYWx1ZSA9IGJvb2xlYW4gfCBudW1iZXIgfCB1bmRlZmluZWQgfCBudWxsO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tsYWRkYV0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTGFkZGFEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcclxuICAgIHByaXZhdGUgZWw6IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBsYWRkYTogTGFkZGFCdXR0b24gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgQElucHV0KCdsYWRkYScpIGxvYWRpbmc6IExhZGRhVmFsdWU7XHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIEBJbmplY3QoTGFkZGFDb25maWcpIEBPcHRpb25hbCgpIGNvbmZpZzogTGFkZGFDb25maWdBcmdzLFxyXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5lbCA9IGVsLm5hdGl2ZUVsZW1lbnQ7XHJcblxyXG4gICAgICAgIGlmICghY29uZmlnKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFwcGx5IGRlZmF1bHQgc3R5bGVzIGlmIHRoZXkgYXJlbid0IG92ZXJ3cml0dGVuIGJ5IGFuIGF0dHJpYnV0ZVxyXG4gICAgICAgIGZvciAobGV0IGF0dHJpYnV0ZSBpbiBjb25maWdBdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIGxldCBjb25maWdWYWx1ZSA9IGNvbmZpZ1tjb25maWdBdHRyaWJ1dGVzW2F0dHJpYnV0ZV1dO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjb25maWdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7IC8vIGRvbid0IHdhc3RlIHRpbWUgcmVhZGluZyB0aGUgYXR0cmlidXRlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5lbC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlIGlzbid0IHNldCAtIGFwcGx5IHRoZSBkZWZhdWx0IGNvbmZpZyB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gKHR5cGVvZiBjb25maWdWYWx1ZSA9PT0gXCJudW1iZXJcIikgPyBjb25maWdWYWx1ZS50b1N0cmluZygpIDogY29uZmlnVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmxhZGRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybjsgLy8gbmVlZGVkIHNpbmNlIG5nT25DaGFuZ2VzIGlzIGNhbGxlZCBiZWZvcmUgbmdPbkluaXRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLmxvYWRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVMYWRkYShjaGFuZ2VzLmxvYWRpbmcucHJldmlvdXNWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURpc2FibGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxhZGRhID0gY3JlYXRlTGFkZGEodGhpcy5lbCk7XHJcblxyXG4gICAgICAgIC8vIGlmIHRoZSBpbml0aWFsIGxvYWRpbmcgdmFsdWUgaXNuJ3QgZmFsc2UsIGEgdGltZW91dCBvZiAwIG1zXHJcbiAgICAgICAgLy8gaXMgbmVjZXNzYXJ5IGZvciB0aGUgY2FsY3VsYXRlZCBzcGlubmVyIHNpemUgdG8gYmUgY29ycmVjdC5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHt0aGlzLnVwZGF0ZUxhZGRhKGZhbHNlKTt9LCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICBpZiAodGhpcy5sYWRkYSkge1xyXG4gICAgICAgICAgICB0aGlzLmxhZGRhLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUxhZGRhKHByZXZpb3VzVmFsdWU6IExhZGRhVmFsdWUpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMubGFkZGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxvYWRpbmc6IGJvb2xlYW4gPSB0eXBlb2YgdGhpcy5sb2FkaW5nID09PSAnbnVtYmVyJyB8fCAhIXRoaXMubG9hZGluZztcclxuICAgICAgICBsZXQgd2FzTG9hZGluZzogYm9vbGVhbiA9IHR5cGVvZiBwcmV2aW91c1ZhbHVlID09PSAnbnVtYmVyJyB8fCAhIXByZXZpb3VzVmFsdWU7XHJcblxyXG4gICAgICAgIGlmICghbG9hZGluZykge1xyXG4gICAgICAgICAgICBpZiAod2FzTG9hZGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWRkYS5zdG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZURpc2FibGVkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXdhc0xvYWRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5sYWRkYS5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmxvYWRpbmcgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFkZGEuc2V0UHJvZ3Jlc3ModGhpcy5sb2FkaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVEaXNhYmxlZCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVsLmRpc2FibGVkID0gdGhpcy5kaXNhYmxlZDtcclxuICAgIH1cclxufVxyXG4iXX0=
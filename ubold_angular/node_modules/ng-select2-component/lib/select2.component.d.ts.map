{"version":3,"file":"select2.component.d.ts","sources":["select2.component.d.ts"],"names":[],"mappingssourcesContent":["import { ConnectedPosition } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { AfterViewInit, ChangeDetectorRef, DoCheck, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Select2Data, Select2Group, Select2Option, Select2RemoveEvent, Select2ScrollEvent, Select2SearchEvent, Select2UpdateEvent, Select2UpdateValue } from './select2-interfaces';\nexport declare class Select2 implements ControlValueAccessor, OnInit, OnDestroy, DoCheck, AfterViewInit {\n    protected _viewportRuler: ViewportRuler;\n    private _changeDetectorRef;\n    private _parentForm;\n    private _parentFormGroup;\n    _control: NgControl;\n    _data: Select2Data;\n    /** data of options & optiongrps */\n    set data(data: Select2Data);\n    minCharForSearch: number;\n    displaySearchStatus: 'default' | 'hidden' | 'always';\n    placeholder: string;\n    customSearchEnabled: boolean;\n    limitSelection: number;\n    listPosition: 'above' | 'below' | 'auto';\n    get multiple(): any;\n    set multiple(value: any);\n    /** use the material style */\n    get overlay(): any;\n    set overlay(value: any);\n    /** use the material style */\n    styleMode: 'material' | 'noStyle' | 'default';\n    /** message when no result */\n    noResultMessage: string;\n    /** maximum results limit (0 = no limit) */\n    maxResults: number;\n    /** message when maximum results */\n    maxResultsMessage: string;\n    /** infinite scroll distance */\n    infiniteScrollDistance: number;\n    /** infinite scroll distance */\n    infiniteScrollThrottle: number;\n    /** infinite scroll activated */\n    get infiniteScroll(): any;\n    set infiniteScroll(value: any);\n    /** use it for change the pattern of the filter search */\n    editPattern: (str: string) => string;\n    /** template for formating */\n    templates: TemplateRef<any> | {\n        [key: string]: TemplateRef<any>;\n    };\n    /** the max height of the results container when opening the select */\n    resultMaxHeight: string;\n    update: EventEmitter<Select2UpdateEvent<Select2UpdateValue>>;\n    open: EventEmitter<Select2>;\n    close: EventEmitter<Select2>;\n    focus: EventEmitter<Select2>;\n    blur: EventEmitter<Select2>;\n    search: EventEmitter<Select2SearchEvent<Select2UpdateValue>>;\n    scroll: EventEmitter<Select2ScrollEvent>;\n    removeOption: EventEmitter<Select2RemoveEvent<Select2UpdateValue>>;\n    option: Select2Option | Select2Option[] | null;\n    isOpen: boolean;\n    searchStyle: string;\n    /** Whether the element is focused or not. */\n    focused: boolean;\n    filteredData: Select2Data;\n    get select2Options(): Select2Option[];\n    get select2Option(): Select2Option;\n    get searchText(): string;\n    set searchText(text: string);\n    /** minimal data of show the search field */\n    get minCountForSearch(): number | string;\n    set minCountForSearch(value: number | string);\n    /** Unique id of the element. */\n    get id(): string;\n    set id(value: string);\n    /** Whether the element is required. */\n    get required(): any;\n    set required(value: any);\n    /** Whether selected items should be hidden. */\n    get disabled(): any;\n    set disabled(value: any);\n    /** Whether items are hidden when has. */\n    get hideSelectedItems(): any;\n    set hideSelectedItems(value: any);\n    /** Whether the element is readonly. */\n    get readonly(): any;\n    set readonly(value: any);\n    /** The input element's value. */\n    get value(): Select2UpdateValue;\n    set value(value: Select2UpdateValue);\n    /** Tab index for the select2 element. */\n    get tabIndex(): number;\n    set tabIndex(value: number);\n    /** reset with no selected value */\n    get resettable(): any;\n    set resettable(value: any);\n    get ariaInvalid(): boolean;\n    get classMaterial(): boolean;\n    get classNostyle(): boolean;\n    get select2above(): boolean;\n    overlayWidth: number;\n    overlayHeight: number;\n    _triggerRect: DOMRect;\n    _dropdownRect: DOMRect;\n    get _positions(): ConnectedPosition[];\n    maxResultsExceeded: boolean;\n    private _minCountForSearch?;\n    private cdkConnectedOverlay;\n    private selection;\n    private resultContainer;\n    private results;\n    private searchInput;\n    private dropdown;\n    private hoveringValue;\n    private innerSearchText;\n    private isSearchboxHidden;\n    private selectionElement;\n    private get resultsElement();\n    private _stateChanges;\n    /** Tab index for the element. */\n    private _tabIndex;\n    private _disabled;\n    private _required;\n    private _readonly;\n    private _multiple;\n    private _overlay;\n    private _resettable;\n    private _hideSelectedItems;\n    private _clickDetection;\n    private _clickDetectionFc;\n    private _id;\n    private _uid;\n    private _value;\n    private _previousNativeValue;\n    private _infiniteScroll;\n    private _overlayPosition;\n    constructor(_viewportRuler: ViewportRuler, _changeDetectorRef: ChangeDetectorRef, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _control: NgControl, tabIndex: string);\n    /** View -> model callback called when select has been touched */\n    private _onTouched;\n    /** View -> model callback called when value changes */\n    private _onChange;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    updateSearchBox(): void;\n    hideSearch(): boolean;\n    getOptionStyle(option: Select2Option): string;\n    mouseenter(option: Select2Option): void;\n    click(option: Select2Option): void;\n    reset(e: MouseEvent): void;\n    prevChange(event: Event): void;\n    toggleOpenAndClose(): void;\n    hasTemplate(option: Select2Option | Select2Group, defaut: string): boolean;\n    getTemplate(option: Select2Option | Select2Group, defaut: string): any;\n    triggerRect(): void;\n    private testSelection;\n    private testValueChange;\n    private updateFilteredData;\n    private clickDetection;\n    private clickExit;\n    private ifParentContainsClass;\n    private ifParentContainsId;\n    private getParentElementByClass;\n    private getParentElementById;\n    private containClasses;\n    focusin(): void;\n    focusout(): void;\n    select(option: Select2Option | null): void;\n    keyDown(e: KeyboardEvent): void;\n    openKey(e: KeyboardEvent): void;\n    trackBy(_index: number, item: Select2Option): any;\n    searchUpdate(e: Event): void;\n    isSelected(option: Select2Option): \"true\" | \"false\";\n    isDisabled(option: Select2Option): \"true\" | \"false\";\n    removeSelection(e: MouseEvent, option: Select2Option): void;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any): void;\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void;\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n    onScroll(way: 'up' | 'down'): void;\n    _isErrorState(): boolean;\n    private moveUp;\n    private moveDown;\n    private updateScrollFromOption;\n    private selectByEnter;\n    private _testKey;\n    private _getKey;\n    private _isKey;\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue;\n    /** Does some manual dirty checking on the native input `value` property. */\n    private _dirtyCheckNativeValue;\n    private _coerceBooleanProperty;\n    private _focusSearchboxOrResultsElement;\n    private _focus;\n    private _isAbobeOverlay;\n}\n"]}
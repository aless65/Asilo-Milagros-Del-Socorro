{"ast":null,"code":"import { ORDERSLIST } from '../shared/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"../../../shared/page-title/page-title.component\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../../shared/widget/preloader/preloader.component\";\nimport * as i6 from \"../../../shared/advanced-table/advanced-table.component\";\nconst _c0 = [\"advancedTable\"];\nexport let OrdersComponent = /*#__PURE__*/(() => {\n  class OrdersComponent {\n    constructor(router, route, sanitizer) {\n      this.router = router;\n      this.route = route;\n      this.sanitizer = sanitizer;\n      this.pageTitle = [];\n      this.orderList = [];\n      this.selectAll = false;\n      this.OrderStatusGroup = \"All\";\n      this.loading = false;\n      this.columns = [];\n    }\n\n    ngOnInit() {\n      this.pageTitle = [{\n        label: 'Ecommerce',\n        path: '/'\n      }, {\n        label: 'Orders',\n        path: '/',\n        active: true\n      }]; // get order list\n\n      this._fetchData(); // initialize advance table \n\n\n      this.initAdvancedTableData();\n    }\n    /**\r\n     *  fetches order list\r\n     */\n\n\n    _fetchData() {\n      this.orderList = ORDERSLIST;\n    }\n\n    ngAfterViewInit() {} // initialize advance table columns\n\n\n    initAdvancedTableData() {\n      this.columns = [{\n        name: 'order_id',\n        label: 'Order ID',\n        formatter: this.orderIDFormatter.bind(this)\n      }, {\n        name: 'products',\n        label: 'Products',\n        formatter: this.productsFormatter.bind(this)\n      }, {\n        name: 'order_date',\n        label: 'Date',\n        formatter: this.orderDateFormatter.bind(this)\n      }, {\n        name: 'payment_status',\n        label: 'Payment Status',\n        formatter: this.ordePaymentStatusFormatter.bind(this)\n      }, {\n        name: 'total',\n        label: 'Total',\n        formatter: order => order.total\n      }, {\n        name: 'payment_method',\n        label: 'Payment Method',\n        formatter: order => order.payment_method\n      }, {\n        name: 'order_status',\n        label: 'Order Status',\n        formatter: this.orderStatusFormatter.bind(this)\n      }, {\n        name: 'Action',\n        label: 'Action',\n        sort: false,\n        formatter: this.orderActionFormatter.bind(this)\n      }];\n    }\n    /**\r\n     *  handles operations that need to be performed after loading table\r\n     */\n\n\n    handleTableLoad(event) {\n      // product cell\n      document.querySelectorAll('.order').forEach(e => {\n        e.addEventListener(\"click\", () => {\n          this.router.navigate(['../order/details'], {\n            relativeTo: this.route,\n            queryParams: {\n              id: e.id\n            }\n          });\n        });\n      });\n    } // formats order ID cell\n\n\n    orderIDFormatter(order) {\n      return this.sanitizer.bypassSecurityTrustHtml(`<a href=\"javascript:void(0)\" class=\"order text-body fw-bold\" id=\"${order.id}\">#UB${order.order_id}</a> `);\n    } //formats product cell\n\n\n    productsFormatter(order) {\n      let products = ``;\n\n      for (let i = 0; i < order.products.length; i++) {\n        products += `<a href=\"javascript:void(0)\"><img src=\"${order.products[i]}\" alt=\"product-img\" height=\"32\" /></a>`;\n      }\n\n      return this.sanitizer.bypassSecurityTrustHtml(products);\n    } // formats order date cell\n\n\n    orderDateFormatter(order) {\n      return this.sanitizer.bypassSecurityTrustHtml(`${order.order_date} <small class=\"text-muted\">${order.order_time}</small>`);\n    } // formats payment status cell\n\n\n    ordePaymentStatusFormatter(order) {\n      if (order.payment_status == \"Paid\") {\n        return this.sanitizer.bypassSecurityTrustHtml(`<h5><span class=\"badge bg-soft-success text-success\"><i class=\"mdi mdi-bitcoin\"></i> Paid</span></h5>`);\n      } else if (order.payment_status == \"Awaiting Authorization\") {\n        return this.sanitizer.bypassSecurityTrustHtml(`<h5><span class=\"badge bg-soft-warning text-warning\"><i class=\"mdi mdi-timer-sand\"></i> Awaiting Authorization</span></h5>`);\n      } else if (order.payment_status == \"Payment Failed\") {\n        return this.sanitizer.bypassSecurityTrustHtml(` <h5><span class=\"badge bg-soft-danger text-danger\"><i class=\"mdi mdi-cancel\"></i> Payment Failed</span></h5>`);\n      } else {\n        return this.sanitizer.bypassSecurityTrustHtml(`<h5><span class=\"badge bg-soft-info text-info\"><i class=\"mdi mdi-cash\"></i> Cash On Delivery</span></h5>`);\n      }\n    } // formats order status\n\n\n    orderStatusFormatter(order) {\n      if (order.order_status == \"Processing\") {\n        return this.sanitizer.bypassSecurityTrustHtml(`<h5><span class=\"badge bg-warning\">Processing</span></h5>`);\n      } else if (order.order_status == \"Delivered\") {\n        return this.sanitizer.bypassSecurityTrustHtml(`<h5><span class=\"badge bg-success\">Delivered</span></h5>`);\n      } else if (order.order_status == \"Shipped\") {\n        return this.sanitizer.bypassSecurityTrustHtml(`<h5><span class=\"badge bg-info\">Shipped</span></h5>`);\n      } else {\n        return this.sanitizer.bypassSecurityTrustHtml(`<h5><span class=\"badge bg-danger\">Cancelled</span></h5>`);\n      }\n    } // action cell formatter\n\n\n    orderActionFormatter(order) {\n      return this.sanitizer.bypassSecurityTrustHtml(`<a href=\"javascript:void(0);\" class=\"action-icon\"> <i class=\"mdi mdi-eye\"></i></a>\n           <a href=\"javascript:void(0);\" class=\"action-icon\"> <i class=\"mdi mdi-square-edit-outline\"></i></a>\n           <a href=\"javascript:void(0);\" class=\"action-icon\"> <i class=\"mdi mdi-delete\"></i></a>`);\n    }\n    /**\r\n    * Match table data with search input\r\n    * @param row Table row\r\n    * @param term Search the value\r\n    */\n\n\n    matches(row, term) {\n      var _a, _b, _c, _d, _e, _f;\n\n      return ((_a = row.order_id) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(term)) || ((_b = row.order_date) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes(term)) || ((_c = row.total) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes(term)) || ((_d = row.payment_method) === null || _d === void 0 ? void 0 : _d.toLowerCase().includes(term)) || ((_e = row.payment_status) === null || _e === void 0 ? void 0 : _e.toLowerCase().includes(term)) || ((_f = row.order_status) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase().includes(term));\n    }\n    /**\r\n     * Search Method\r\n    */\n\n\n    searchData(searchTerm) {\n      if (searchTerm === '') {\n        this._fetchData();\n      } else {\n        let updatedData = ORDERSLIST; //  filter\n\n        updatedData = updatedData.filter(product => this.matches(product, searchTerm));\n        this.orderList = updatedData;\n      }\n    }\n    /**\r\n     * change order status group\r\n     * @param OrderStatusGroup order status\r\n     */\n\n\n    changeOrderStatusGroup(OrderStatusGroup) {\n      this.loading = true;\n      let updatedData = ORDERSLIST; //  filter\n\n      updatedData = OrderStatusGroup === \"All\" ? ORDERSLIST : [...ORDERSLIST].filter(o => {\n        var _a;\n\n        return (_a = o.payment_status) === null || _a === void 0 ? void 0 : _a.includes(OrderStatusGroup);\n      });\n      this.orderList = updatedData;\n      setTimeout(() => {\n        this.loading = false;\n      }, 400);\n    }\n\n  }\n\n  OrdersComponent.ɵfac = function OrdersComponent_Factory(t) {\n    return new (t || OrdersComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n  };\n\n  OrdersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OrdersComponent,\n    selectors: [[\"app-ecommerce-orders\"]],\n    viewQuery: function OrdersComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.advancedTable = _t.first);\n      }\n    },\n    decls: 32,\n    vars: 9,\n    consts: [[\"title\", \"Orders\", 3, \"breadcrumbItems\"], [1, \"row\"], [1, \"col-12\"], [1, \"card\"], [1, \"card-body\"], [1, \"row\", \"mb-2\"], [1, \"col-lg-8\"], [1, \"d-flex\", \"flex-wrap\", \"align-items-center\"], [\"for\", \"status-select\", 1, \"me-2\"], [1, \"me-sm-3\"], [\"id\", \"status-select\", \"name\", \"status\", 1, \"form-select\", \"form-select\", \"my-1\", \"my-lg-0\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"value\", \"All\"], [\"value\", \"Paid\"], [\"value\", \"Authorization\"], [\"value\", \"Failed\"], [\"value\", \"COD\"], [1, \"col-lg-4\"], [1, \"text-lg-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"waves-effect\", \"waves-light\", \"mb-2\", \"me-2\"], [1, \"mdi\", \"mdi-basket\", \"me-1\"], [\"type\", \"button\", 1, \"btn\", \"btn-light\", \"waves-effect\", \"mb-2\"], [3, \"display\"], [\"tableClasses\", \"table-centered\", \"theadClasses\", \"table-light\", 3, \"tableData\", \"columns\", \"pagination\", \"hasRowSelection\", \"isSearchable\", \"isSortable\", \"handleTableLoad\", \"search\"], [\"advancedTable\", \"\"]],\n    template: function OrdersComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-page-title\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"form\", 7)(8, \"label\", 8);\n        i0.ɵɵtext(9, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 9)(11, \"select\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function OrdersComponent_Template_select_ngModelChange_11_listener($event) {\n          return ctx.OrderStatusGroup = $event;\n        })(\"change\", function OrdersComponent_Template_select_change_11_listener() {\n          return ctx.changeOrderStatusGroup(ctx.OrderStatusGroup);\n        });\n        i0.ɵɵelementStart(12, \"option\", 11);\n        i0.ɵɵtext(13, \"All\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"option\", 12);\n        i0.ɵɵtext(15, \"Paid\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"option\", 13);\n        i0.ɵɵtext(17, \"Awaiting Authorization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"option\", 14);\n        i0.ɵɵtext(19, \"Payment failed\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"option\", 15);\n        i0.ɵɵtext(21, \"Cash on Delivery\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(22, \"div\", 16)(23, \"div\", 17)(24, \"button\", 18);\n        i0.ɵɵelement(25, \"i\", 19);\n        i0.ɵɵtext(26, \" Add New Order\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"button\", 20);\n        i0.ɵɵtext(28, \"Export\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(29, \"app-ui-preloader\", 21);\n        i0.ɵɵelementStart(30, \"app-advanced-table\", 22, 23);\n        i0.ɵɵlistener(\"handleTableLoad\", function OrdersComponent_Template_app_advanced_table_handleTableLoad_30_listener($event) {\n          return ctx.handleTableLoad($event);\n        })(\"search\", function OrdersComponent_Template_app_advanced_table_search_30_listener($event) {\n          return ctx.searchData($event);\n        });\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"breadcrumbItems\", ctx.pageTitle);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngModel\", ctx.OrderStatusGroup);\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"display\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"tableData\", ctx.orderList)(\"columns\", ctx.columns)(\"pagination\", true)(\"hasRowSelection\", true)(\"isSearchable\", true)(\"isSortable\", false);\n      }\n    },\n    directives: [i3.PageTitleComponent, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.NgForm, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgModel, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i5.PreloaderComponent, i6.AdvancedTableComponent],\n    styles: [\"\"]\n  });\n  return OrdersComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
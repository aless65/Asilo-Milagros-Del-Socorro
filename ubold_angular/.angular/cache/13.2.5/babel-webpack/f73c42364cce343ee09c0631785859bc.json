{"ast":null,"code":"import feather from \"feather-icons\";\nimport { NavigationEnd } from '@angular/router';\nimport { TWO_COl_MENU_ITEMS } from '../../shared/config/menu-meta';\nimport { findAllParent, findMenuItem } from '../../shared/helper/utils';\nimport { LEFT_SIDEBAR_TYPE_CONDENSED, LEFT_SIDEBAR_TYPE_DEFAULT } from '../../shared/config/layout.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/core/service/event.service\";\nimport * as i3 from \"ng-click-outside\";\nimport * as i4 from \"../icon-menu/icon-menu.component\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../main-menu/main-menu.component\";\n\nfunction LeftSidebarComponent_app_main_menu_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-main-menu\", 6);\n    i0.ɵɵlistener(\"toggleMenu\", function LeftSidebarComponent_app_main_menu_4_Template_app_main_menu_toggleMenu_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.toggleMenuItem($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"menuItems\", ctx_r0.twoColumnMenuItems)(\"openMenuItems\", ctx_r0.openMenuItems)(\"activeMenuItems\", ctx_r0.activeMenuItems)(\"sidebarType\", ctx_r0.sidebarType);\n  }\n}\n\nexport let LeftSidebarComponent = /*#__PURE__*/(() => {\n  class LeftSidebarComponent {\n    constructor(router, eventService) {\n      this.router = router;\n      this.eventService = eventService;\n      this.twoColumnMenuItems = [];\n      this.activeMenuItems = [];\n      this.openMenuItems = [];\n      this.showMobileMenu = true;\n      router.events.forEach(event => {\n        if (event instanceof NavigationEnd) {\n          this._activateMenu(); //actiavtes menu\n\n\n          this.hideMenu(); //hides leftbar on change of route\n        }\n      });\n    }\n\n    ngOnInit() {\n      this.initMenu();\n    }\n\n    ngAfterViewInit() {\n      setTimeout(() => {\n        this._activateMenu();\n      });\n      feather.replace();\n    }\n\n    ngOnChanges(changes) {\n      setTimeout(() => {\n        this.changeSidebarWidth();\n      }, 0);\n    }\n    /**\r\n    * initialize menuitems\r\n    */\n\n\n    initMenu() {\n      this.twoColumnMenuItems = TWO_COl_MENU_ITEMS;\n    }\n    /**\r\n    * Hides the menubar\r\n    */\n\n\n    hideMenu() {\n      document.body.classList.remove('sidebar-enable');\n    }\n    /**\r\n     * manage sidebar width\r\n     */\n\n\n    changeSidebarWidth() {\n      if (this.activeMenuItems.length === 1) {\n        const activeMt = findMenuItem(this.twoColumnMenuItems, this.activeMenuItems[0]);\n\n        if (!activeMt.children) {\n          this.eventService.broadcast('changeLeftSidebarType', LEFT_SIDEBAR_TYPE_CONDENSED);\n          this.showMobileMenu = false;\n        } else {\n          this.eventService.broadcast('changeLeftSidebarType', LEFT_SIDEBAR_TYPE_DEFAULT);\n        }\n      }\n    }\n    /**\r\n    * activates menu\r\n    */\n\n\n    _activateMenu() {\n      const div = document.getElementById('two-column-menu');\n      let matchingMenuItem = null;\n\n      if (div) {\n        let items = div.getElementsByClassName('two-column-nav-link-ref');\n\n        for (let i = 0; i < items.length; ++i) {\n          if (window.location.pathname === items[i].pathname) {\n            matchingMenuItem = items[i];\n            break;\n          }\n        }\n\n        if (matchingMenuItem) {\n          const mid = matchingMenuItem.getAttribute('data-menu-key');\n          const activeMt = findMenuItem(this.twoColumnMenuItems, mid);\n\n          if (activeMt) {\n            const matchingObjs = [activeMt['key'], ...findAllParent(this.twoColumnMenuItems, activeMt)];\n            this.activeMenuItems = matchingObjs;\n            this.twoColumnMenuItems.forEach(menu => {\n              var _a;\n\n              (_a = menu.children) === null || _a === void 0 ? void 0 : _a.forEach(subMenu => {\n                if (subMenu.children) {\n                  subMenu.collapsed = !matchingObjs.includes(subMenu.key);\n                }\n              });\n            });\n          }\n        }\n      } // set active menu items as open menu items\n\n\n      this.openMenuItems = this.activeMenuItems;\n      this.changeSidebarWidth();\n    }\n    /**\r\n    * toggles open menu\r\n    * @param menuItem clicked menuitem\r\n    * @param collapse collpase instance\r\n    */\n\n\n    toggleMenuItem(event) {\n      var _a; // if event is called from icon menu\n\n\n      if (!event.collapse) {\n        if (!event.menuItem.children && event.menuItem.link) {\n          this.eventService.broadcast('changeLeftSidebarType', LEFT_SIDEBAR_TYPE_CONDENSED);\n          this.activeMenuItems = this.findActiveMenusItems(event.menuItem.key);\n          this.openMenuItems = this.activeMenuItems;\n          this.showMobileMenu = false;\n        } else {\n          this.eventService.broadcast('changeLeftSidebarType', LEFT_SIDEBAR_TYPE_DEFAULT);\n          this.openMenuItems = this.findActiveMenusItems(event.menuItem.key);\n          this.activeMenuItems = [...new Set(this.activeMenuItems.concat(this.findActiveMenusItems(event.menuItem.key)))];\n          this.showMobileMenu = true;\n        }\n      } // if event is called from main menu\n      else {\n        (_a = event.collapse) === null || _a === void 0 ? void 0 : _a.toggle();\n        let openMenuItems;\n\n        if (!event.menuItem.collapsed) {\n          openMenuItems = [event.menuItem['key'], ...findAllParent(this.twoColumnMenuItems, event.menuItem)];\n          this.twoColumnMenuItems.forEach(menu => {\n            var _a;\n\n            (_a = menu.children) === null || _a === void 0 ? void 0 : _a.forEach(subMenu => {\n              subMenu.collapsed = !openMenuItems.includes(subMenu.key);\n            });\n          });\n        }\n      }\n    }\n    /**\r\n     * find active menu\r\n     */\n\n\n    findActiveMenusItems(key) {\n      const activeMt = findMenuItem(this.twoColumnMenuItems, key);\n\n      if (activeMt) {\n        const matchingObjs = [activeMt['key'], ...findAllParent(this.twoColumnMenuItems, activeMt)];\n        return matchingObjs;\n      }\n\n      return [];\n    }\n\n  }\n\n  LeftSidebarComponent.ɵfac = function LeftSidebarComponent_Factory(t) {\n    return new (t || LeftSidebarComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.EventService));\n  };\n\n  LeftSidebarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LeftSidebarComponent,\n    selectors: [[\"app-two-column-left-sidebar\"]],\n    inputs: {\n      sidebarType: \"sidebarType\",\n      showMobileMenu: \"showMobileMenu\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 6,\n    vars: 6,\n    consts: [[1, \"left-side-menu\", 3, \"exclude\", \"excludeBeforeClick\", \"clickOutside\"], [1, \"h-100\"], [\"id\", \"two-column-menu\", 1, \"sidebar-content\"], [3, \"menuItems\", \"openMenuItems\", \"activeMenuItems\", \"toggleMenu\"], [3, \"menuItems\", \"openMenuItems\", \"activeMenuItems\", \"sidebarType\", \"toggleMenu\", 4, \"ngIf\"], [1, \"clearfix\"], [3, \"menuItems\", \"openMenuItems\", \"activeMenuItems\", \"sidebarType\", \"toggleMenu\"]],\n    template: function LeftSidebarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"clickOutside\", function LeftSidebarComponent_Template_div_clickOutside_0_listener() {\n          return ctx.hideMenu();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"app-icon-menu\", 3);\n        i0.ɵɵlistener(\"toggleMenu\", function LeftSidebarComponent_Template_app_icon_menu_toggleMenu_3_listener($event) {\n          return ctx.toggleMenuItem($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, LeftSidebarComponent_app_main_menu_4_Template, 1, 4, \"app-main-menu\", 4);\n        i0.ɵɵelement(5, \"div\", 5);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"exclude\", \".open-left\")(\"excludeBeforeClick\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"menuItems\", ctx.twoColumnMenuItems)(\"openMenuItems\", ctx.openMenuItems)(\"activeMenuItems\", ctx.activeMenuItems);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showMobileMenu);\n      }\n    },\n    directives: [i3.ClickOutsideDirective, i4.IconMenuComponent, i5.NgIf, i6.MainMenuComponent],\n    styles: [\"\"]\n  });\n  return LeftSidebarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
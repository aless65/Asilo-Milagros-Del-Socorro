{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\PC\\\\Documents\\\\GitHub\\\\Asilo-Milagros-Del-Socorro\\\\ubold_angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// import { QRCodeComponent } from 'ngx-qrcode';\nimport * as moment from 'moment';\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"src/app/apps/residentes/Service/service.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../../shared/page-title/page-title.component\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\nexport class HistorialComponent {\n  constructor( // private sanitizer: DomSanitizer,\n  activeModal, // private fb: FormBuilder,\n  service, route, activatedRoute, changeDetectorRef) {\n    var _this = this;\n\n    this.activeModal = activeModal;\n    this.service = service;\n    this.route = route;\n    this.activatedRoute = activatedRoute;\n    this.changeDetectorRef = changeDetectorRef;\n    this.pageTitle = [];\n    this.historialExpediente = [];\n    this.title = 'app';\n    this.elementType = 'url';\n    this.value = 'Techiediaries'; // Function to convert image file to data URL\n\n    this.getDataUrl = url => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = 'Anonymous';\n\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n          canvas.width = img.width;\n          canvas.height = img.height;\n          ctx === null || ctx === void 0 ? void 0 : ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas to ensure transparency\n\n          ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(img, 0, 0);\n          const dataURL = canvas.toDataURL('image/png'); // Preserve transparency by using PNG format\n\n          resolve(dataURL);\n        };\n\n        img.onerror = reject;\n        img.src = url;\n      });\n    }; // private getPdfDownloadLink = (docDefinition: TDocumentDefinitions): Promise<string> => {\n    //     return new Promise((resolve) => {\n    //       const pdfDocGenerator = pdfMake.createPdf(docDefinition);\n    //       pdfDocGenerator.getBlob((blob) => {\n    //         const dataUrl = URL.createObjectURL(blob);\n    //         resolve(dataUrl);\n    //       });\n    //     });\n    //   }\n\n\n    this.generatePdf = /*#__PURE__*/_asyncToGenerator(function* () {\n      const imageDataUrl = yield _this.getDataUrl(_this.expediente.expe_Fotografia || 'https://i.ibb.co/Wn8HrLm/blank-profile-picture.jpg');\n      const backgroundDataUrl = yield _this.getDataUrl('https://i.ibb.co/8YqvgZM/3.png');\n      _this.docDefinition = {\n        background: {\n          image: backgroundDataUrl,\n          width: 595.28,\n          height: 841.89,\n          opacity: 0.5,\n          fit: [800, 600],\n          alignment: 'center',\n          margin: [0, (841.89 - 600) / 2] // Adjust the top margin for vertical centering\n\n        },\n        content: [{\n          columns: [{\n            width: 100,\n            height: 120,\n            image: imageDataUrl,\n            fit: [110, 120]\n          }, {\n            width: 295,\n            stack: [{\n              text: _this.expediente.cent_Nombre,\n              fontSize: 10,\n              // width: 75,\n              margin: [0, 0, 200, 0] // Add margin: [top, right, bottom, left]\n\n            }, {\n              margin: [0, 5, 0, 0],\n              text: `${_this.expediente.resi_Nombres} ${_this.expediente.resi_Apellidos}`,\n              style: 'subheader'\n            }, {\n              margin: [0, 7, 0, 0],\n              text: [{\n                text: 'Sexo: ',\n                bold: true,\n                style: 'subheader2'\n              }, {\n                text: _this.expediente.sexoDes,\n                style: 'subheader2'\n              }]\n            }, {\n              margin: [0, 7, 0, 0],\n              text: [{\n                text: 'Fecha de Nacimiento: ',\n                bold: true,\n                style: 'subheader2'\n              }, {\n                text: moment(_this.expediente.resi_Nacimiento).format('DD/MM/YYYY'),\n                style: 'subheader2'\n              }]\n            }, {\n              margin: [0, 7, 0, 0],\n              text: [{\n                text: 'Tipo de Sangre: ',\n                bold: true,\n                style: 'subheader2'\n              }, {\n                text: _this.expediente.tiposang_Nombre,\n                style: 'subheader2'\n              }]\n            }, {\n              margin: [0, 7, 0, 0],\n              text: [{\n                text: 'Enfermedades: ',\n                bold: true,\n                style: 'subheader2'\n              }, {\n                text: _this.expediente.resi_Enfermedades || 'Ninguna',\n                style: 'subheader2'\n              }]\n            }]\n          }, {\n            width: 75,\n            qr: _this.value\n          }],\n          columnGap: 20\n        }, {\n          margin: [0, 35, 0, 20],\n          canvas: [{\n            type: 'line',\n            x1: 0,\n            y1: 5,\n            x2: 515,\n            y2: 5,\n            lineWidth: 1,\n            lineColor: '#cccccc'\n          }]\n        }, {\n          columns: [{\n            width: '100%',\n            stack: [{\n              table: {\n                headerRows: 1,\n                widths: ['5%', '15%', '50%', '30%'],\n                body: [[{\n                  text: '#',\n                  bold: true,\n                  fontSize: 10,\n                  margin: [0, 5, 0, 5]\n                }, {\n                  text: 'Fecha',\n                  bold: true,\n                  fontSize: 10,\n                  margin: [0, 5, 0, 5]\n                }, {\n                  text: 'Observaciones',\n                  bold: true,\n                  fontSize: 10,\n                  margin: [0, 5, 0, 5]\n                }, {\n                  text: 'Empleado',\n                  bold: true,\n                  fontSize: 10,\n                  margin: [0, 5, 0, 5]\n                }], ..._this.historialExpediente.map((historial, index) => [{\n                  text: index + 1,\n                  fillColor: undefined,\n                  fontSize: 10,\n                  margin: [0, 5, 0, 5]\n                }, {\n                  text: moment(historial.histexpe_FechaActualizacion).format('DD/MM/YY'),\n                  fillColor: undefined,\n                  fontSize: 10,\n                  margin: [0, 5, 0, 5]\n                }, {\n                  text: historial.histexpe_Observaciones,\n                  fillColor: undefined,\n                  fontSize: 10,\n                  margin: [0, 5, 0, 5]\n                }, {\n                  text: historial.empe_NombreCompleto,\n                  fillColor: undefined,\n                  fontSize: 10,\n                  margin: [0, 5, 0, 5]\n                }])] //   width: '100%', // Set the table width to 100%\n\n              },\n              layout: 'noBorders'\n            }]\n          }]\n        }],\n        styles: {\n          header: {\n            fontSize: 16,\n            bold: true\n          },\n          subheader: {\n            fontSize: 13,\n            bold: true\n          },\n          quote: {\n            italics: true\n          },\n          small: {\n            fontSize: 8\n          },\n          subheader2: {\n            fontSize: 10,\n            italics: true\n          }\n        }\n      }; // const pdfDownloadLink = await this.getPdfDownloadLink(docDefinition);\n      // Generate the QR code\n      // this.qrcode.data = pdfDownloadLink;\n      // this.qrcode.generate();\n\n      const pdfDocGenerator = pdfMake.createPdf(_this.docDefinition);\n      pdfDocGenerator.getBlob( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (blob) {\n          const dataUrl = URL.createObjectURL(blob);\n          /*IMPORTANTE */\n          //  this.service.getPDFUpload(blob).subscribe(\n          //     (response: any) => {\n          //       this.value = response.url;\n          //       this.expediente.expe_QRCode = response.url;\n          //     },\n          //     (error: any) => {\n          //       console.error(error);\n          //     }\n          //   );\n          // console.log(savedFileURL);\n\n          const iframe = document.createElement('iframe');\n          iframe.src = dataUrl;\n          iframe.style.width = '100%';\n          iframe.style.height = '1250px';\n          const pdfContainer = document.createElement('div');\n          pdfContainer.style.textAlign = 'center';\n          pdfContainer.appendChild(iframe);\n          const historialContainer = document.getElementById('historialContainer');\n          historialContainer === null || historialContainer === void 0 ? void 0 : historialContainer.appendChild(pdfContainer); // Trigger change detection to ensure the value is updated in the component\n\n          _this.changeDetectorRef.detectChanges();\n        });\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    });\n  }\n\n  ngOnInit() {\n    this.pageTitle = [{\n      label: 'Residentes',\n      path: '/'\n    }, {\n      label: 'Historial',\n      path: '/',\n      active: true\n    }];\n    const expedienteData = JSON.parse(localStorage.getItem('expedienteData') || '');\n    const historialData = JSON.parse(localStorage.getItem('historialData') || '');\n\n    if (expedienteData && historialData) {\n      this.expediente = expedienteData.data;\n      this.historialExpediente = historialData.data;\n      console.log('Expediente Data:', this.expediente);\n      console.log('Historial Data:', this.historialExpediente);\n    }\n\n    console.log(this.expediente, 'expediente');\n    console.log(this.historialExpediente, 'expediente');\n    this.generatePdf();\n  }\n\n}\n\nHistorialComponent.ɵfac = function HistorialComponent_Factory(t) {\n  return new (t || HistorialComponent)(i0.ɵɵdirectiveInject(i1.NgbModal), i0.ɵɵdirectiveInject(i2.ServiceService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nHistorialComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HistorialComponent,\n  selectors: [[\"app-residentes-historial\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[\"title\", \"Historial M\\u00E9dico\", 3, \"breadcrumbItems\"], [\"id\", \"historialContainer\"]],\n  template: function HistorialComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-page-title\", 0)(1, \"div\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"breadcrumbItems\", ctx.pageTitle);\n    }\n  },\n  directives: [i4.PageTitleComponent],\n  styles: [\"\"]\n});","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { SELLERSLIST } from '../shared/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"../../../shared/page-title/page-title.component\";\nimport * as i3 from \"../../../shared/widget/preloader/preloader.component\";\nimport * as i4 from \"../../../shared/advanced-table/advanced-table.component\";\nconst _c0 = [\"advancedTable\"];\nexport let SellerComponent = /*#__PURE__*/(() => {\n  class SellerComponent {\n    constructor(sanitizer) {\n      this.sanitizer = sanitizer;\n      this.pageTitle = [];\n      this.loading = false;\n      this.selectAll = false;\n      this.sellerList = [];\n      this.columns = [];\n    }\n\n    ngOnInit() {\n      this.pageTitle = [{\n        label: 'Ecommerce',\n        path: '/'\n      }, {\n        label: 'Sellers',\n        path: '/',\n        active: true\n      }]; // get customer data\n\n      this._fetchData(); // initialize advance table \n\n\n      this.initAdvancedTableData();\n    }\n    /**\r\n     * fetches customer data\r\n     */\n\n\n    _fetchData() {\n      this.sellerList = SELLERSLIST;\n    }\n    /**\r\n     *  initialize advance table columns\r\n     */\n\n\n    initAdvancedTableData() {\n      this.columns = [{\n        name: 'name',\n        label: 'Owner Name',\n        formatter: this.sellerNameFormatter.bind(this)\n      }, {\n        name: 'store',\n        label: 'Store Name',\n        formatter: seller => seller.store\n      }, {\n        name: 'ratings',\n        label: 'Ratings',\n        formatter: seller => seller.ratings\n      }, {\n        name: 'product',\n        label: 'Products',\n        formatter: seller => seller.products\n      }, {\n        name: 'balance',\n        label: 'Wallet Balance',\n        formatter: seller => seller.balance\n      }, {\n        name: 'created_on',\n        label: 'Created Date',\n        formatter: seller => seller.created_on\n      }, {\n        name: 'revenue',\n        label: 'Revenue',\n        formatter: seller => seller.revenue\n      }, {\n        name: 'Action',\n        label: 'Action',\n        width: 80,\n        formatter: this.sellerActionFormatter.bind(this),\n        sort: false\n      }];\n    } // formats name cell\n\n\n    sellerNameFormatter(seller) {\n      return this.sanitizer.bypassSecurityTrustHtml(`\n      <div class=\"table-user\">\n      <img src=\"${seller.image}\" alt=\"table-user\" class=\"me-2 rounded-circle\">\n       <a href=\"javascript:void(0);\" class=\"text-body fw-semibold\">${seller.name}</a>\n       </div>\n      `);\n    } // action cell formatter\n\n\n    sellerActionFormatter(seller) {\n      return this.sanitizer.bypassSecurityTrustHtml(`<a href=\"javascript:void(0);\" class=\"action-icon\"> <i class=\"mdi mdi-square-edit-outline\"></i></a>\n           <a href=\"javascript:void(0);\" class=\"action-icon\"> <i class=\"mdi mdi-delete\"></i></a>`);\n    } // compares two cell value\n\n\n    compare(v1, v2) {\n      return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;\n    }\n    /**\r\n     * Sort the table data\r\n     * @param event column name,sort direction\r\n     */\n\n\n    sort(event) {\n      if (event.direction === '') {\n        this.sellerList = SELLERSLIST;\n      } else {\n        this.sellerList = [...this.sellerList].sort((a, b) => {\n          const res = this.compare(a[event.column], b[event.column]);\n          return event.direction === 'asc' ? res : -res;\n        });\n      }\n    }\n    /**\r\n    * Match table data with search input\r\n    * @param row Table row\r\n    * @param term Search the value\r\n    */\n\n\n    matches(row, term) {\n      var _a, _b, _c, _d, _e;\n\n      return ((_a = row.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(term)) || ((_b = row.store) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes(term)) || ((_c = String(row.products)) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes(term)) || ((_d = row.balance) === null || _d === void 0 ? void 0 : _d.toLowerCase().includes(term)) || ((_e = row.created_on) === null || _e === void 0 ? void 0 : _e.toLowerCase().includes(term));\n    }\n    /**\r\n     * Search Method\r\n    */\n\n\n    searchData(searchTerm) {\n      if (searchTerm === '') {\n        this._fetchData();\n      } else {\n        let updatedData = SELLERSLIST; //  filter\n\n        updatedData = updatedData.filter(seller => this.matches(seller, searchTerm));\n        this.sellerList = updatedData;\n      }\n    }\n\n  }\n\n  SellerComponent.ɵfac = function SellerComponent_Factory(t) {\n    return new (t || SellerComponent)(i0.ɵɵdirectiveInject(i1.DomSanitizer));\n  };\n\n  SellerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SellerComponent,\n    selectors: [[\"app-ecommerce-seller\"]],\n    viewQuery: function SellerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.advancedTable = _t.first);\n      }\n    },\n    decls: 16,\n    vars: 8,\n    consts: [[\"title\", \"Sellers\", 3, \"breadcrumbItems\"], [1, \"row\"], [1, \"col-12\"], [1, \"card\"], [1, \"card-body\"], [1, \"row\", \"mb-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", \"waves-effect\", \"waves-light\", \"mb-2\", \"float-end\"], [1, \"mdi\", \"mdi-cog\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"waves-effect\", \"waves-light\", \"mb-2\"], [1, \"mdi\", \"mdi-basket\", \"me-1\"], [3, \"display\"], [\"tableClasses\", \"table-centered\", \"theadClasses\", \"table-light\", 3, \"tableData\", \"columns\", \"hasRowSelection\", \"pagination\", \"isSearchable\", \"isSortable\", \"search\", \"sort\"], [\"advancedTable\", \"\"]],\n    template: function SellerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-page-title\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 2)(7, \"div\")(8, \"button\", 6);\n        i0.ɵɵelement(9, \"i\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 8);\n        i0.ɵɵelement(11, \"i\", 9);\n        i0.ɵɵtext(12, \" Add Sellers\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(13, \"app-ui-preloader\", 10);\n        i0.ɵɵelementStart(14, \"app-advanced-table\", 11, 12);\n        i0.ɵɵlistener(\"search\", function SellerComponent_Template_app_advanced_table_search_14_listener($event) {\n          return ctx.searchData($event);\n        })(\"sort\", function SellerComponent_Template_app_advanced_table_sort_14_listener($event) {\n          return ctx.sort($event);\n        });\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"breadcrumbItems\", ctx.pageTitle);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"display\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"tableData\", ctx.sellerList)(\"columns\", ctx.columns)(\"hasRowSelection\", true)(\"pagination\", true)(\"isSearchable\", true)(\"isSortable\", true);\n      }\n    },\n    directives: [i2.PageTitleComponent, i3.PreloaderComponent, i4.AdvancedTableComponent],\n    styles: [\"\"]\n  });\n  return SellerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
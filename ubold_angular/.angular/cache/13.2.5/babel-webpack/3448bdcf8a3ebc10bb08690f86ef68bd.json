{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\n/**\r\n * @returns registered user list\r\n */\n\nfunction getUsers() {\n  // array in session storage for registered users\n  let users = JSON.parse(sessionStorage.getItem('users')) || [{\n    id: 1,\n    username: 'test',\n    email: 'ubold@coderthemes.com',\n    password: 'test',\n    firstName: 'Geneva',\n    lastName: 'Kennedy',\n    avatar: 'assets/images/users/user-1.jpg',\n    location: 'California, USA',\n    title: 'Admin Head'\n  }];\n  return users;\n}\n\nlet users = getUsers();\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    intercept(request, next) {\n      const authHeader = request.headers.get('Authorization');\n      const isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token'); // wrap in delayed observable to simulate server api call\n\n      return of(null).pipe(mergeMap(() => {\n        let temp = []; // authenticate - public\n\n        if (request.url.endsWith('/api/login') && request.method === 'POST') {\n          const user = users.find(x => x.email === request.body.email && x.password === request.body.password);\n\n          if (!user) {\n            return error('Email or password is incorrect');\n          }\n\n          return ok(Object.assign(Object.assign({}, user), {\n            name: user.firstName + ' ' + user.lastName,\n            token: `fake-jwt-token`\n          }));\n        } // store new user - public\n\n\n        if (request.url.endsWith('/api/signup') && request.method === 'POST') {\n          const user = users.find(x => x.email === request.body.email && x.password === request.body.password);\n\n          if (user) {\n            return error('User Already Exists');\n          } else {\n            let [firstName, lastName] = request.body.name.split(' ');\n            const newUser = {\n              id: users.length + 1,\n              username: firstName,\n              email: request.body.email,\n              password: request.body.password,\n              firstName: firstName,\n              lastName: lastName,\n              avatar: 'assets/images/users/avatar-5.jpg',\n              location: 'California, USA',\n              title: 'Admin'\n            };\n            temp = [...users];\n            temp.push(newUser);\n            [...users] = temp;\n            sessionStorage.setItem('users', JSON.stringify(users));\n            return ok();\n          }\n        } // get all users\n\n\n        if (request.url.endsWith('/api/users') && request.method === 'GET') {\n          if (!isLoggedIn) {\n            return unauthorised();\n          }\n\n          return ok(users);\n        } // pass through any requests not handled above\n\n\n        return next.handle(request);\n      })).pipe(materialize()).pipe(delay(500)).pipe(dematerialize()); // private helper functions\n\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n\n      function unauthorised() {\n        return throwError({\n          status: 401,\n          error: {\n            message: 'Unauthorised'\n          }\n        });\n      }\n\n      function error(message) {\n        return throwError({\n          status: 400,\n          error: {\n            message\n          }\n        });\n      }\n    }\n\n  }\n\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)();\n  };\n\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport let FakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module"}
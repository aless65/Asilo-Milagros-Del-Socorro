{"ast":null,"code":"import { CUSTOMERSLIST } from '../shared/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"../../../shared/page-title/page-title.component\";\nimport * as i3 from \"../../../shared/widget/preloader/preloader.component\";\nimport * as i4 from \"../../../shared/advanced-table/advanced-table.component\";\nconst _c0 = [\"advancedTable\"];\nexport let CustomerComponent = /*#__PURE__*/(() => {\n  class CustomerComponent {\n    constructor(sanitizer) {\n      this.sanitizer = sanitizer;\n      this.pageTitle = [];\n      this.customerList = [];\n      this.loading = false;\n      this.selectAll = false;\n      this.pageSizeOptions = [5, 10, 20];\n      this.columns = [];\n    }\n\n    ngOnInit() {\n      this.pageTitle = [{\n        label: 'Ecommerce',\n        path: '/'\n      }, {\n        label: 'Customers',\n        path: '/',\n        active: true\n      }];\n\n      this._fetchData(); // initialize advance table \n\n\n      this.initAdvancedTableData();\n    }\n    /**\r\n     * fetch data\r\n     */\n\n\n    _fetchData() {\n      this.customerList = CUSTOMERSLIST;\n    }\n    /**\r\n    * initialize advance table columns\r\n    */\n\n\n    initAdvancedTableData() {\n      this.columns = [{\n        name: 'name',\n        label: 'Customers',\n        formatter: this.customerNameFormatter.bind(this)\n      }, {\n        name: 'phone',\n        label: 'Phone',\n        formatter: customer => customer.phone\n      }, {\n        name: 'balance',\n        label: 'Balance',\n        formatter: customer => customer.balance\n      }, {\n        name: 'orders',\n        label: 'Orders',\n        formatter: customer => customer.orders\n      }, {\n        name: 'last_order',\n        label: 'Last Order',\n        formatter: this.customerLastOrderFormatter.bind(this)\n      }, {\n        name: 'status',\n        label: 'Status',\n        formatter: this.customerStatusFormatter.bind(this)\n      }, {\n        name: 'Action',\n        label: 'Action',\n        width: 75,\n        formatter: this.customerActionFormatter.bind(this),\n        sort: false\n      }];\n    } // formats name cell\n\n\n    customerNameFormatter(customer) {\n      return this.sanitizer.bypassSecurityTrustHtml(`\n      <div class=\"table-user\">\n      <img src=\"${customer.avatar}\" alt=\"table-user\" class=\"me-2 rounded-circle\">\n       <a href=\"javascript:void(0);\" class=\"text-body fw-semibold\">${customer.name}</a>\n       </div>\n      `);\n    } //formats last order cell\n\n\n    customerLastOrderFormatter(customer) {\n      return this.sanitizer.bypassSecurityTrustHtml(`  ${customer.last_order.date} <small class=\"text-muted\">${customer.last_order.time}</small>`);\n    } // formats customer status\n\n\n    customerStatusFormatter(customer) {\n      if (customer.status == \"Active\") {\n        return this.sanitizer.bypassSecurityTrustHtml(`<span class=\"badge badge-soft-success\">Active</span>`);\n      } else {\n        return this.sanitizer.bypassSecurityTrustHtml(`<span class=\"badge badge-soft-danger\">Blocked</span>`);\n      }\n    } // action cell formatter\n\n\n    customerActionFormatter() {\n      return this.sanitizer.bypassSecurityTrustHtml(`  <a href=\"javascript:void(0);\" class=\"action-icon\"> <i class=\"mdi mdi-square-edit-outline\"></i></a>\n           <a href=\"javascript:void(0);\" class=\"action-icon\"> <i class=\"mdi mdi-delete\"></i></a>`);\n    }\n    /**\r\n     * compares two cell value\r\n     */\n\n\n    compare(v1, v2) {\n      return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;\n    }\n    /**\r\n     * Sort the table data\r\n     * @param event column name,direction\r\n     */\n\n\n    sort(event) {\n      if (event.direction === '') {\n        this.customerList = CUSTOMERSLIST;\n      } else {\n        this.customerList = [...this.customerList].sort((a, b) => {\n          let res;\n\n          if (event.column === 'last_order') {\n            res = this.compare(a['last_order']['date'], b['last_order']['date']);\n          } else {\n            res = this.compare(a[event.column], b[event.column]);\n          }\n\n          return event.direction === 'asc' ? res : -res;\n        });\n      }\n    }\n    /**\r\n    * Match table data with search input\r\n    * @param row Table row\r\n    * @param term Search the value\r\n    */\n\n\n    matches(row, term) {\n      var _a, _b, _c;\n\n      return ((_a = row.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(term)) || ((_b = row.phone) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes(term)) || String(row.orders).toLowerCase().includes(term) || String(row.balance).toLowerCase().includes(term) || ((_c = row.status) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase().includes(term));\n    }\n    /**\r\n     * Search Method\r\n    */\n\n\n    searchData(searchTerm) {\n      if (searchTerm === '') {\n        this._fetchData();\n      } else {\n        let updatedData = CUSTOMERSLIST; //  filter\n\n        updatedData = updatedData.filter(customer => this.matches(customer, searchTerm));\n        this.customerList = updatedData;\n      }\n    }\n\n  }\n\n  CustomerComponent.ɵfac = function CustomerComponent_Factory(t) {\n    return new (t || CustomerComponent)(i0.ɵɵdirectiveInject(i1.DomSanitizer));\n  };\n\n  CustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CustomerComponent,\n    selectors: [[\"app-ecommerce-customer\"]],\n    viewQuery: function CustomerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.advancedTable = _t.first);\n      }\n    },\n    decls: 21,\n    vars: 9,\n    consts: [[\"title\", \"Customers\", 3, \"breadcrumbItems\"], [1, \"row\"], [1, \"col-12\"], [1, \"card\"], [1, \"card-body\"], [1, \"row\", \"mb-2\"], [1, \"col-sm-4\"], [\"href\", \"javascript:void(0);\", 1, \"btn\", \"btn-danger\", \"mb-2\"], [1, \"mdi\", \"mdi-plus-circle\", \"me-2\"], [1, \"col-sm-8\"], [1, \"text-sm-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", \"mb-2\", \"me-1\"], [1, \"mdi\", \"mdi-cog\"], [\"type\", \"button\", 1, \"btn\", \"btn-light\", \"mb-2\", \"me-1\"], [\"type\", \"button\", 1, \"btn\", \"btn-light\", \"mb-2\"], [3, \"display\"], [\"tableClasses\", \"table-centered table-striped\", 3, \"tableData\", \"columns\", \"pagination\", \"isSearchable\", \"hasRowSelection\", \"pageSizeOptions\", \"isSortable\", \"search\", \"sort\"], [\"advancedTable\", \"\"]],\n    template: function CustomerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-page-title\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"a\", 7);\n        i0.ɵɵelement(8, \"i\", 8);\n        i0.ɵɵtext(9, \" Add Customers\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 9)(11, \"div\", 10)(12, \"button\", 11);\n        i0.ɵɵelement(13, \"i\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 13);\n        i0.ɵɵtext(15, \"Import\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 14);\n        i0.ɵɵtext(17, \"Export\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(18, \"app-ui-preloader\", 15);\n        i0.ɵɵelementStart(19, \"app-advanced-table\", 16, 17);\n        i0.ɵɵlistener(\"search\", function CustomerComponent_Template_app_advanced_table_search_19_listener($event) {\n          return ctx.searchData($event);\n        })(\"sort\", function CustomerComponent_Template_app_advanced_table_sort_19_listener($event) {\n          return ctx.sort($event);\n        });\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"breadcrumbItems\", ctx.pageTitle);\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"display\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"tableData\", ctx.customerList)(\"columns\", ctx.columns)(\"pagination\", true)(\"isSearchable\", true)(\"hasRowSelection\", true)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"isSortable\", true);\n      }\n    },\n    directives: [i2.PageTitleComponent, i3.PreloaderComponent, i4.AdvancedTableComponent],\n    styles: [\"\"]\n  });\n  return CustomerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"src/app/apps/enfermedades/Service/service.service\";\nimport * as i5 from \"../../../shared/page-title/page-title.component\";\nimport * as i6 from \"../../../shared/advanced-table/advanced-table.component\";\nimport * as i7 from \"@angular/common\";\nconst _c0 = [\"advancedTable\"];\nconst _c1 = [\"content\"];\nconst _c2 = [\"deleteEnfermedadModal\"];\n\nfunction ListComponent_ng_template_11_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtext(1, \" Nombre requerido \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c3 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\n\nfunction ListComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"h4\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function ListComponent_ng_template_11_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const modal_r5 = restoredCtx.$implicit;\n      return modal_r5.dismiss(\"\");\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 14)(5, \"form\", 15, 16);\n    i0.ɵɵlistener(\"ngSubmit\", function ListComponent_ng_template_11_Template_form_ngSubmit_5_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.submitForm();\n    });\n    i0.ɵɵelementStart(7, \"div\", 17)(8, \"label\", 18);\n    i0.ɵɵtext(9, \"Nombre\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 19);\n    i0.ɵɵtemplate(11, ListComponent_ng_template_11_div_11_Template, 2, 0, \"div\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 21);\n    i0.ɵɵelement(13, \"button\", 22);\n    i0.ɵɵelementStart(14, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function ListComponent_ng_template_11_Template_button_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const modal_r5 = restoredCtx.$implicit;\n      return modal_r5.close(\"\");\n    });\n    i0.ɵɵtext(15, \"Cancelar\");\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const _r6 = i0.ɵɵreference(6);\n\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.esEditar ? \"Editar enfermedad\" : \"Agregar enfermedad\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.newEnfermedad);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c3, _r6.submitted && ctx_r2.form1.name.invalid));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r6.submitted && ctx_r2.form1.name.invalid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerText\", ctx_r2.esEditar ? \"Editar\" : \"Agregar\");\n  }\n}\n\nfunction ListComponent_ng_template_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"h4\", 12);\n    i0.ɵɵtext(2, \"Eliminar enfermedad\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function ListComponent_ng_template_13_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const modal_r12 = restoredCtx.$implicit;\n      return modal_r12.dismiss(\"\");\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 14)(5, \"p\");\n    i0.ɵɵtext(6, \"\\u00BFRealmente desea eliminar esta enfermedad?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 21)(8, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function ListComponent_ng_template_13_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.deleteEnfermedad();\n    });\n    i0.ɵɵtext(9, \"Eliminar\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function ListComponent_ng_template_13_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const modal_r12 = restoredCtx.$implicit;\n      return modal_r12.close(\"\");\n    });\n    i0.ɵɵtext(11, \"Cancelar\");\n    i0.ɵɵelementEnd()()();\n  }\n} // import { ToastModule } from 'primeng/toast';\n// import { MessageService } from 'primeng/api';\n// import { NgToastService } from 'ng-angular-popup';\n\n\nexport let ListComponent = /*#__PURE__*/(() => {\n  class ListComponent {\n    constructor(sanitizer, activeModal, fb, service) {\n      this.sanitizer = sanitizer;\n      this.activeModal = activeModal;\n      this.fb = fb;\n      this.service = service;\n      this.pageTitle = [];\n      this.enfermedades = [];\n      this.columns = [];\n    }\n\n    ngOnInit() {\n      this.pageTitle = [{\n        label: 'Inicio',\n        path: '/'\n      }, {\n        label: 'Enfermedades',\n        path: '/',\n        active: true\n      }];\n\n      this._fetchData(); // initialize advance table \n\n\n      this.initAdvancedTableData();\n      this.newEnfermedad = this.fb.group({\n        name: ['', Validators.required]\n      });\n    } // convenience getter for easy access to form fields\n\n\n    get form1() {\n      return this.newEnfermedad.controls;\n    }\n    /**\r\n    * opens modal\r\n    * @param title title of modal\r\n    * @param data data to be used in modal\r\n    */\n\n\n    openModal(isEditOrNew) {\n      if (isEditOrNew === \"new\") {\n        this.newEnfermedad.reset();\n        this.esEditar = false;\n      } else {\n        this.esEditar = true;\n      }\n\n      this.activeModal.open(this.content, {\n        centered: true\n      });\n    }\n\n    openModalDelete() {\n      this.activeModal.open(this.deleteEnfermedadModal, {\n        centered: true,\n        windowClass: 'delete-modal'\n      });\n    }\n\n    deleteEnfermedad() {\n      this.service.deleteEnfermedades(this.selectedEnfermedad.enfe_Id || 0).subscribe(response => {\n        console.log(\"se pudo:\", response);\n\n        this._fetchData();\n      }, error => {\n        console.log(\"no se pudo:\", error);\n      });\n\n      this._fetchData();\n\n      this.activeModal.dismissAll('');\n    }\n\n    submitForm() {\n      var _a;\n\n      if (this.newEnfermedad.invalid) {\n        console.log(\"pipi\");\n        return;\n      }\n\n      const enfermedad = {\n        enfe_Id: ((_a = this.selectedEnfermedad) === null || _a === void 0 ? void 0 : _a.enfe_Id) || 0,\n        enfe_Nombre: this.newEnfermedad.value.name,\n        enfe_UsuCreacion: 1,\n        enfe_UsuModificacion: 1\n      };\n\n      if (this.esEditar) {\n        this.service.editEnfermedades(enfermedad).subscribe(response => {\n          console.log(\"se pudo:\", response);\n\n          this._fetchData();\n        }, error => {\n          console.log(\"no se pudo:\", error);\n        });\n      } else {\n        this.service.addEnfermedades(enfermedad).subscribe(response => {\n          // this.openSuccess();\n          // this.showSuccess();\n          console.log(\"se pudo:\", response);\n\n          this._fetchData();\n        }, error => {\n          console.log(\"no se pudo:\", error);\n        });\n      }\n\n      this.activeModal.dismissAll('');\n    } // showSuccess(){\n    //   this.messageService.add({ severity: 'success', summary: 'Success', detail: 'Message Content' });\n    // }\n    // openSuccess(){\n    //   this.toast.success({detail:'Success',summary:'This is Success', sticky:true,position:'tr'})\n    // }\n\n\n    _fetchData() {\n      this.service.getEnfermedades().subscribe(response => {\n        this.enfermedades = response.data;\n        console.log(this.enfermedades);\n      });\n    }\n    /**\r\n     * initialize advance table columns\r\n     */\n\n\n    initAdvancedTableData() {\n      console.log(this.enfermedades);\n      this.columns = [// {\n      //   name: 'name',\n      //   label: 'Basic Info',\n      //   formatter: this.enfermedadNameFormatter.bind(this)\n      // },\n      {\n        name: 'enfe_Id',\n        label: 'ID',\n        formatter: enfermedad => enfermedad.enfe_Id\n      }, {\n        name: 'enfe_Nombre',\n        label: 'Nombre',\n        formatter: enfermedad => enfermedad.enfe_Nombre\n      }, {\n        name: 'Action',\n        label: 'Acciones',\n        width: 82,\n        formatter: this.enfermedadActionFormatter.bind(this)\n      }];\n    }\n    /**\r\n    *  handles operations that need to be performed after loading table\r\n    */\n\n\n    handleTableLoad(event) {\n      // product cell\n      document.querySelectorAll('.edit').forEach(e => {\n        e.addEventListener(\"click\", () => {\n          const selectedId = Number(e.id);\n          this.selectedEnfermedad = this.enfermedades.find(enfermedad => enfermedad.enfe_Id === selectedId) || this.selectedEnfermedad;\n\n          if (this.selectedEnfermedad) {\n            this.newEnfermedad = this.fb.group({\n              name: [this.selectedEnfermedad.enfe_Nombre || '', Validators.required]\n            });\n            this.openModal(\"edit\");\n          }\n        });\n      });\n      document.querySelectorAll('.delete').forEach(e => {\n        e.addEventListener(\"click\", () => {\n          const selectedId = Number(e.id);\n          this.selectedEnfermedad = this.enfermedades.find(enfermedad => enfermedad.enfe_Id === selectedId) || this.selectedEnfermedad;\n\n          if (this.selectedEnfermedad) {\n            this.newEnfermedad = this.fb.group({\n              name: [this.selectedEnfermedad.enfe_Nombre || '', Validators.required]\n            });\n            this.openModalDelete();\n          }\n        });\n      });\n    } // formats name cell\n\n\n    enfermedadNameFormatter(enfermedad) {\n      return this.sanitizer.bypassSecurityTrustHtml(`\n      <div class=\"table-user\">\n      <a href=\"javascript:void(0);\" class=\"customer text-body fw-semibold\" id=\"${enfermedad.enfe_Id}\">${enfermedad.enfe_Nombre}</a>\n      </div>\n      `);\n    } // action cell formatter\n\n\n    enfermedadActionFormatter(enfermedad) {\n      return this.sanitizer.bypassSecurityTrustHtml(` <a href=\"javascript:void(0);\" class=\"edit action-icon\" id=\"${enfermedad.enfe_Id}\"> <i class=\"mdi mdi-square-edit-outline\" ></i></a>\n        <a href=\"javascript:void(0);\" class=\"delete action-icon\" id=\"${enfermedad.enfe_Id}\"> <i class=\"mdi mdi-delete\"></i></a>`);\n    }\n    /**\r\n    * Match table data with search input\r\n    * @param row Table row\r\n    * @param term Search the value\r\n    */\n\n\n    matches(row, term) {\n      var _a, _b;\n\n      return ((_a = row.enfe_Id) === null || _a === void 0 ? void 0 : _a.toString().includes(term)) || ((_b = row.enfe_Nombre) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes(term));\n    }\n    /**\r\n     * Search Method\r\n    */\n\n\n    searchData(searchTerm) {\n      if (searchTerm === '') {\n        this._fetchData();\n      } else {\n        let updatedData = this.enfermedades; //  filter\n\n        updatedData = updatedData.filter(enfermedad => this.matches(enfermedad, searchTerm));\n        this.enfermedades = updatedData;\n      }\n    }\n\n  }\n\n  ListComponent.ɵfac = function ListComponent_Factory(t) {\n    return new (t || ListComponent)(i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(i2.NgbModal), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.ServiceService));\n  };\n\n  ListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListComponent,\n    selectors: [[\"app-enfermedades-list\"]],\n    viewQuery: function ListComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 7);\n        i0.ɵɵviewQuery(_c2, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.advancedTable = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.deleteEnfermedadModal = _t.first);\n      }\n    },\n    decls: 15,\n    vars: 7,\n    consts: [[\"title\", \"Enfermedades\", 3, \"breadcrumbItems\"], [1, \"row\"], [1, \"card\"], [1, \"card-body\"], [1, \"row\", \"justify-content-between\", \"mb-2\"], [1, \"col-12\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"waves-effect\", \"waves-light\", \"mb-2\", 3, \"click\"], [\"tableClasses\", \"table-centered table-nowrap table-hover\", 3, \"tableData\", \"columns\", \"pagination\", \"isSearchable\", \"hasRowSelection\", \"isSortable\", \"handleTableLoad\", \"search\"], [\"advancedTable\", \"\"], [\"content\", \"\"], [\"deleteEnfermedadModal\", \"\"], [1, \"modal-header\", \"bg-light\"], [\"id\", \"myCenterModalLabel\", 1, \"modal-title\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [1, \"modal-body\", \"p-4\"], [3, \"formGroup\", \"ngSubmit\"], [\"addEnfermedad\", \"ngForm\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"name\", \"placeholder\", \"Nombre\", \"required\", \"\", \"formControlName\", \"name\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"text-end\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"waves-effect\", \"waves-light\", \"me-1\", 3, \"innerText\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"waves-effect\", \"waves-light\", 3, \"click\"], [1, \"invalid-feedback\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", \"waves-effect\", \"waves-light\", \"me-1\", 3, \"click\"]],\n    template: function ListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-page-title\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\")(7, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function ListComponent_Template_button_click_7_listener() {\n          return ctx.openModal(\"new\");\n        });\n        i0.ɵɵtext(8, \"Agregar\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(9, \"app-advanced-table\", 7, 8);\n        i0.ɵɵlistener(\"handleTableLoad\", function ListComponent_Template_app_advanced_table_handleTableLoad_9_listener($event) {\n          return ctx.handleTableLoad($event);\n        })(\"search\", function ListComponent_Template_app_advanced_table_search_9_listener($event) {\n          return ctx.searchData($event);\n        });\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵtemplate(11, ListComponent_ng_template_11_Template, 16, 7, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(13, ListComponent_ng_template_13_Template, 12, 0, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"breadcrumbItems\", ctx.pageTitle);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"tableData\", ctx.enfermedades)(\"columns\", ctx.columns)(\"pagination\", true)(\"isSearchable\", true)(\"hasRowSelection\", false)(\"isSortable\", false);\n      }\n    },\n    directives: [i5.PageTitleComponent, i6.AdvancedTableComponent, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.DefaultValueAccessor, i3.RequiredValidator, i3.NgControlStatus, i3.FormControlName, i7.NgClass, i7.NgIf],\n    styles: [\"\"]\n  });\n  return ListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { CRMCUSTOMERS } from '../shared/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../../shared/page-title/page-title.component\";\nimport * as i5 from \"../../../shared/advanced-table/advanced-table.component\";\nimport * as i6 from \"@angular/common\";\nconst _c0 = [\"advancedTable\"];\nconst _c1 = [\"content\"];\n\nfunction CustomersComponent_ng_template_20_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtext(1, \" Please provide valid name \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CustomersComponent_ng_template_20_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtext(1, \" Please provide valid email \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CustomersComponent_ng_template_20_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtext(1, \" Please provide valid phone \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CustomersComponent_ng_template_20_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtext(1, \" Please provide valid location \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c2 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\n\nfunction CustomersComponent_ng_template_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"h4\", 19);\n    i0.ɵɵtext(2, \"Add New Customers\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function CustomersComponent_ng_template_20_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const modal_r3 = restoredCtx.$implicit;\n      return modal_r3.dismiss(\"\");\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 21)(5, \"form\", 22, 23)(7, \"div\", 24)(8, \"label\", 25);\n    i0.ɵɵtext(9, \"Full Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 26);\n    i0.ɵɵtemplate(11, CustomersComponent_ng_template_20_div_11_Template, 2, 0, \"div\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 24)(13, \"label\", 28);\n    i0.ɵɵtext(14, \"Email address\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(15, \"input\", 29);\n    i0.ɵɵtemplate(16, CustomersComponent_ng_template_20_div_16_Template, 2, 0, \"div\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 24)(18, \"label\", 30);\n    i0.ɵɵtext(19, \"Phone\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"input\", 31);\n    i0.ɵɵtemplate(21, CustomersComponent_ng_template_20_div_21_Template, 2, 0, \"div\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"div\", 24)(23, \"label\", 32);\n    i0.ɵɵtext(24, \"Location\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(25, \"input\", 33);\n    i0.ɵɵtemplate(26, CustomersComponent_ng_template_20_div_26_Template, 2, 0, \"div\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"div\", 34)(28, \"button\", 35);\n    i0.ɵɵtext(29, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function CustomersComponent_ng_template_20_Template_button_click_30_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const modal_r3 = restoredCtx.$implicit;\n      return modal_r3.close(\"\");\n    });\n    i0.ɵɵtext(31, \"Continue\");\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const _r4 = i0.ɵɵreference(6);\n\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.newCustomer);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c2, _r4.submitted && ctx_r2.form1.name.invalid));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r4.submitted && ctx_r2.form1.name.invalid);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c2, _r4.submitted && ctx_r2.form1.email.invalid));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r4.submitted && ctx_r2.form1.email.invalid);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c2, _r4.submitted && ctx_r2.form1.phone.invalid));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r4.submitted && ctx_r2.form1.phone.invalid);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(15, _c2, _r4.submitted && ctx_r2.form1.location.invalid));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r4.submitted && ctx_r2.form1.location.invalid);\n  }\n}\n\nexport let CustomersComponent = /*#__PURE__*/(() => {\n  class CustomersComponent {\n    constructor(sanitizer, activeModal, fb) {\n      this.sanitizer = sanitizer;\n      this.activeModal = activeModal;\n      this.fb = fb;\n      this.pageTitle = [];\n      this.customers = [];\n      this.columns = [];\n    }\n\n    ngOnInit() {\n      this.pageTitle = [{\n        label: 'CRM',\n        path: '/'\n      }, {\n        label: 'Customers',\n        path: '/',\n        active: true\n      }];\n\n      this._fetchData(); // initialize advance table \n\n\n      this.initAdvancedTableData();\n      this.newCustomer = this.fb.group({\n        name: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]],\n        phone: ['', Validators.required],\n        location: ['', Validators.required]\n      });\n    } // convenience getter for easy access to form fields\n\n\n    get form1() {\n      return this.newCustomer.controls;\n    }\n    /**\r\n     * opens modal\r\n     * @param title title of modal\r\n     * @param data data to be used in modal\r\n     */\n\n\n    openModal() {\n      this.activeModal.open(this.content, {\n        centered: true\n      });\n    }\n    /**\r\n     * fetch contact list\r\n     */\n\n\n    _fetchData() {\n      this.customers = CRMCUSTOMERS;\n    }\n    /**\r\n    * initialize advance table columns\r\n    */\n\n\n    initAdvancedTableData() {\n      this.columns = [{\n        name: 'name',\n        label: 'Customer',\n        formatter: this.customerNameFormatter.bind(this)\n      }, {\n        name: 'phone',\n        label: 'Phone',\n        formatter: customer => customer.phone\n      }, {\n        name: 'email',\n        label: 'Email',\n        formatter: customer => customer.email\n      }, {\n        name: 'location',\n        label: 'Location',\n        formatter: customer => customer.location\n      }, {\n        name: 'created_date',\n        label: 'Created On',\n        formatter: customer => customer.created_date\n      }, {\n        name: 'status',\n        label: 'Status',\n        formatter: this.customerStatusFormatter.bind(this)\n      }, {\n        name: 'Action',\n        label: 'Action',\n        width: 82,\n        formatter: this.customerActionFormatter.bind(this),\n        sort: false\n      }];\n    } // formats name cell\n\n\n    customerNameFormatter(customer) {\n      return this.sanitizer.bypassSecurityTrustHtml(`\n      <div class=\"table-user\">\n      <img src=\"${customer.avatar}\" alt=\"table-user\" class=\"me-2 rounded-circle\">\n       <a href=\"javascript:void(0);\" class=\"customer text-body fw-semibold\" id=\"${customer.id}\">${customer.name}</a>\n       </div>\n      `);\n    } // formats customer status\n\n\n    customerStatusFormatter(customer) {\n      if (customer.status == \"Active\") {\n        return this.sanitizer.bypassSecurityTrustHtml(`<span class=\"badge bg-soft-success text-success\">Active</span>`);\n      } else {\n        return this.sanitizer.bypassSecurityTrustHtml(`<span class=\"badge bg-soft-danger text-danger\">Blocked</span>`);\n      }\n    } // action cell formatter\n\n\n    customerActionFormatter() {\n      return this.sanitizer.bypassSecurityTrustHtml(` <a href=\"javascript:void(0);\" class=\"action-icon\"> <i class=\"mdi mdi-square-edit-outline\"></i></a>\n        <a href=\"javascript:void(0);\" class=\"action-icon\"> <i class=\"mdi mdi-delete\"></i></a>`);\n    }\n    /**\r\n    * Match table data with search input\r\n    * @param row Table row\r\n    * @param term Search the value\r\n    */\n\n\n    matches(row, term) {\n      var _a, _b, _c;\n\n      return ((_a = row.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(term)) || ((_b = row.phone) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes(term)) || row.created_date.toLowerCase().includes(term) || row.company.toLowerCase().includes(term) || ((_c = row.email) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase().includes(term));\n    }\n    /**\r\n     * Search Method\r\n    */\n\n\n    searchData(searchTerm) {\n      if (searchTerm === '') {\n        this._fetchData();\n      } else {\n        let updatedData = CRMCUSTOMERS; //  filter\n\n        updatedData = updatedData.filter(customer => this.matches(customer, searchTerm));\n        this.customers = updatedData;\n      }\n    }\n\n  }\n\n  CustomersComponent.ɵfac = function CustomersComponent_Factory(t) {\n    return new (t || CustomersComponent)(i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(i2.NgbModal), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n\n  CustomersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CustomersComponent,\n    selectors: [[\"app-crm-customers\"]],\n    viewQuery: function CustomersComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.advancedTable = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      }\n    },\n    decls: 22,\n    vars: 7,\n    consts: [[\"title\", \"Customers\", 3, \"breadcrumbItems\"], [1, \"row\"], [1, \"col-12\"], [1, \"card\"], [1, \"card-body\"], [1, \"row\", \"mb-2\"], [1, \"col-sm-4\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"waves-effect\", \"waves-light\", 3, \"click\"], [1, \"mdi\", \"mdi-plus-circle\", \"me-1\"], [1, \"col-sm-8\"], [1, \"text-sm-end\", \"mt-2\", \"mt-sm-0\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", \"mb-2\", \"me-1\"], [1, \"mdi\", \"mdi-cog\"], [\"type\", \"button\", 1, \"btn\", \"btn-light\", \"mb-2\", \"me-1\"], [\"type\", \"button\", 1, \"btn\", \"btn-light\", \"mb-2\"], [\"tableClasses\", \"table-centered table-nowrap\", 3, \"tableData\", \"columns\", \"pagination\", \"isSearchable\", \"hasRowSelection\", \"isSortable\", \"search\"], [\"advancedTable\", \"\"], [\"content\", \"\"], [1, \"modal-header\", \"bg-light\"], [\"id\", \"myCenterModalLabel\", 1, \"modal-title\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [1, \"modal-body\", \"p-4\"], [3, \"formGroup\"], [\"addCustomer\", \"ngForm\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"name\", \"placeholder\", \"Enter full name\", \"required\", \"\", \"formControlName\", \"name\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"exampleInputEmail1\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"exampleInputEmail1\", \"placeholder\", \"Enter email\", \"required\", \"\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"ngClass\"], [\"for\", \"position\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"position\", \"placeholder\", \"Enter phone number\", \"required\", \"\", \"formControlName\", \"phone\", 1, \"form-control\", 3, \"ngClass\"], [\"for\", \"category\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"category\", \"placeholder\", \"Enter Location\", \"required\", \"\", \"formControlName\", \"location\", 1, \"form-control\", 3, \"ngClass\"], [1, \"text-end\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"waves-effect\", \"waves-light\", \"me-1\"], [1, \"invalid-feedback\"]],\n    template: function CustomersComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-page-title\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function CustomersComponent_Template_button_click_7_listener() {\n          return ctx.openModal();\n        });\n        i0.ɵɵelement(8, \"i\", 8);\n        i0.ɵɵtext(9, \" Add Customers\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 9)(11, \"div\", 10)(12, \"button\", 11);\n        i0.ɵɵelement(13, \"i\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 13);\n        i0.ɵɵtext(15, \"Import\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 14);\n        i0.ɵɵtext(17, \"Export\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(18, \"app-advanced-table\", 15, 16);\n        i0.ɵɵlistener(\"search\", function CustomersComponent_Template_app_advanced_table_search_18_listener($event) {\n          return ctx.searchData($event);\n        });\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵtemplate(20, CustomersComponent_ng_template_20_Template, 32, 17, \"ng-template\", null, 17, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"breadcrumbItems\", ctx.pageTitle);\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"tableData\", ctx.customers)(\"columns\", ctx.columns)(\"pagination\", true)(\"isSearchable\", true)(\"hasRowSelection\", true)(\"isSortable\", false);\n      }\n    },\n    directives: [i4.PageTitleComponent, i5.AdvancedTableComponent, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.DefaultValueAccessor, i3.RequiredValidator, i3.NgControlStatus, i3.FormControlName, i6.NgClass, i6.NgIf],\n    styles: [\"\"]\n  });\n  return CustomersComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { NgbDateParserFormatter } from '@ng-bootstrap/ng-bootstrap';\nimport { REVENUEHISTORYDATA, USERBALANCEDATA } from './data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"../../../apps/Service/service.service\";\nimport * as i3 from \"ng-apexcharts\";\n/**\r\n * This Service handles how the date is rendered and parsed from keyboard i.e. in the bound input field.\r\n */\n\nexport class CustomDateParserFormatter extends NgbDateParserFormatter {\n  constructor() {\n    super(...arguments);\n    this.month_list = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    this.DELIMITER = \" \";\n  }\n\n  parse(value) {\n    if (value) {\n      let date = value.split(this.DELIMITER);\n      return {\n        day: parseInt(date[1], 10),\n        month: this.month_list.indexOf(date[0]),\n        year: parseInt(date[2], 10)\n      };\n    }\n\n    return null;\n  }\n\n  format(date) {\n    return date ? this.month_list[date.month - 1] + this.DELIMITER + date.day + ',' + this.DELIMITER + date.year : '';\n  }\n\n}\n\nCustomDateParserFormatter.ɵfac = /*@__PURE__*/function () {\n  let ɵCustomDateParserFormatter_BaseFactory;\n  return function CustomDateParserFormatter_Factory(t) {\n    return (ɵCustomDateParserFormatter_BaseFactory || (ɵCustomDateParserFormatter_BaseFactory = i0.ɵɵgetInheritedFactory(CustomDateParserFormatter)))(t || CustomDateParserFormatter);\n  };\n}();\n\nCustomDateParserFormatter.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomDateParserFormatter,\n  factory: CustomDateParserFormatter.ɵfac\n});\nexport class DashboardOneComponent {\n  constructor(calendar, service) {\n    this.calendar = calendar;\n    this.service = service;\n    this.statisticsCardData = [];\n    this.chartStatisticsData = [];\n    this.userBalanceData = [];\n    this.revenueHistoryData = [];\n  }\n\n  ngOnInit() {\n    this.date = this.calendar.getToday();\n\n    this._fetchStatisticsData();\n\n    this.initChart();\n\n    this._fetchUserBalanceData();\n\n    this._fetchRevenueHistoryData();\n  }\n  /**\r\n   * fetch statistics data\r\n   */\n\n\n  _fetchStatisticsData() {\n    this.statisticsCardData = [{\n      id: 1,\n      variant: 'primary',\n      description: \"Total Revenue\",\n      icon: 'fe-heart',\n      stats: 58967,\n      options: {\n        prefix: '$',\n        duration: 2\n      }\n    }, {\n      id: 2,\n      variant: 'success',\n      description: \"Today's Sales\",\n      icon: 'fe-shopping-cart',\n      stats: 127,\n      options: {\n        duration: 2\n      }\n    }, {\n      id: 3,\n      variant: 'info',\n      description: \"Conversion\",\n      icon: 'fe-bar-chart-line',\n      stats: 0.58,\n      options: {\n        decimalPlaces: 2,\n        duration: 2,\n        suffix: '%'\n      }\n    }, {\n      id: 4,\n      variant: 'warning',\n      description: \"Today's Visits\",\n      icon: 'fe-eye',\n      stats: 78.41,\n      options: {\n        decimalPlaces: 2,\n        duration: 2,\n        suffix: 'k'\n      }\n    }];\n  }\n  /**\r\n   * initialize charts\r\n   */\n\n\n  initChart() {\n    this.service.getGrafica().subscribe(response => {\n      const datos = response.data; // Extract unique labels\n\n      const uniqueLabels = [...new Set(datos.filter(item => item.labels !== undefined && item.labels !== '').map(item => item.labels))]; // Extract unique centro names\n\n      const uniqueCentros = [...new Set(datos.map(item => item.name))]; // Initialize the series array\n\n      const series = uniqueCentros.map(name => {\n        const data = datos.filter(item => item.name === name).map(item => item.data);\n        return {\n          name: name,\n          type: 'column',\n          data: data\n        };\n      });\n      console.log(series); // this.columns = series;\n      // this.labels = uniqueLabels;\n\n      this.salesAnalyticsChart = {\n        series: series,\n        visibleSeries: [0],\n        chart: {\n          height: 378,\n          type: 'line',\n          offsetY: 10,\n          toolbar: {\n            show: false\n          }\n        },\n        stroke: {\n          width: [2, 3]\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: '50%'\n          }\n        },\n        colors: ['#1abc9c', '#4a81d4', '#d49d4a', '#4ad49d', '#d44ac6', '#4ad49d'],\n        dataLabels: {\n          enabled: false,\n          enabledOnSeries: [1]\n        },\n        labels: uniqueLabels,\n        xaxis: {\n          type: 'category'\n        },\n        legend: {\n          offsetY: 7\n        },\n        grid: {\n          padding: {\n            bottom: 20\n          }\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shade: 'light',\n            type: 'horizontal',\n            shadeIntensity: 0.25,\n            gradientToColors: undefined,\n            inverseColors: true,\n            opacityFrom: 0.75,\n            opacityTo: 0.75,\n            stops: [0, 0, 0]\n          }\n        },\n        yaxis: [{\n          title: {\n            text: 'Residentes con la enfermedad'\n          }\n        }]\n      };\n    });\n\n    this._fetchChartStatistics();\n\n    this.revenuChart = {\n      series: [68],\n      chart: {\n        height: 242,\n        type: 'radialBar'\n      },\n      plotOptions: {\n        radialBar: {\n          hollow: {\n            size: '65%'\n          }\n        }\n      },\n      colors: ['#f86262'],\n      labels: ['Revenue']\n    };\n  }\n  /**\r\n   * fetches chart statistics\r\n   */\n\n\n  _fetchChartStatistics() {\n    this.chartStatisticsData = [{\n      title: 'Target',\n      stats: '$7.8k',\n      icon: 'fe-arrow-down',\n      variant: 'danger'\n    }, {\n      title: 'Last week',\n      stats: '$1.4k',\n      icon: 'fe-arrow-up',\n      variant: 'success'\n    }, {\n      title: 'Last Month',\n      stats: '$15k',\n      icon: 'fe-arrow-down',\n      variant: 'danger'\n    }];\n  }\n  /**\r\n   * fetch users balance data\r\n   */\n\n\n  _fetchUserBalanceData() {\n    this.userBalanceData = USERBALANCEDATA;\n  }\n\n  _fetchRevenueHistoryData() {\n    this.revenueHistoryData = REVENUEHISTORYDATA;\n  }\n\n}\n\nDashboardOneComponent.ɵfac = function DashboardOneComponent_Factory(t) {\n  return new (t || DashboardOneComponent)(i0.ɵɵdirectiveInject(i1.NgbCalendar), i0.ɵɵdirectiveInject(i2.ServiceService));\n};\n\nDashboardOneComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DashboardOneComponent,\n  selectors: [[\"app-dashboard-one\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NgbDateParserFormatter,\n    useClass: CustomDateParserFormatter\n  }])],\n  decls: 24,\n  vars: 12,\n  consts: function () {\n    let i18n_0;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\r\n       * @suppress {msgDescriptions}\r\n       */\n      const MSG_EXTERNAL_6570363013146073520$$SRC_APP_PAGES_DASHBOARD_DASHBOARD_ONE_DASHBOARD_ONE_COMPONENT_TS_1 = goog.getMsg(\"Dashboard\");\n      i18n_0 = MSG_EXTERNAL_6570363013146073520$$SRC_APP_PAGES_DASHBOARD_DASHBOARD_ONE_DASHBOARD_ONE_COMPONENT_TS_1;\n    } else {\n      i18n_0 = $localize`Dashboard`;\n    }\n\n    let i18n_2;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\r\n       * @suppress {msgDescriptions}\r\n       */\n      const MSG_EXTERNAL_6048892649018070225$$SRC_APP_PAGES_DASHBOARD_DASHBOARD_ONE_DASHBOARD_ONE_COMPONENT_TS_3 = goog.getMsg(\"Today\");\n      i18n_2 = MSG_EXTERNAL_6048892649018070225$$SRC_APP_PAGES_DASHBOARD_DASHBOARD_ONE_DASHBOARD_ONE_COMPONENT_TS_3;\n    } else {\n      i18n_2 = $localize`Today`;\n    }\n\n    let i18n_4;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\r\n       * @suppress {msgDescriptions}\r\n       */\n      const MSG_EXTERNAL_928838138686087140$$SRC_APP_PAGES_DASHBOARD_DASHBOARD_ONE_DASHBOARD_ONE_COMPONENT_TS_5 = goog.getMsg(\"Weekly\");\n      i18n_4 = MSG_EXTERNAL_928838138686087140$$SRC_APP_PAGES_DASHBOARD_DASHBOARD_ONE_DASHBOARD_ONE_COMPONENT_TS_5;\n    } else {\n      i18n_4 = $localize`Weekly`;\n    }\n\n    let i18n_6;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\r\n       * @suppress {msgDescriptions}\r\n       */\n      const MSG_EXTERNAL_6762743264882388498$$SRC_APP_PAGES_DASHBOARD_DASHBOARD_ONE_DASHBOARD_ONE_COMPONENT_TS_7 = goog.getMsg(\"Monthly\");\n      i18n_6 = MSG_EXTERNAL_6762743264882388498$$SRC_APP_PAGES_DASHBOARD_DASHBOARD_ONE_DASHBOARD_ONE_COMPONENT_TS_7;\n    } else {\n      i18n_6 = $localize`Monthly`;\n    }\n\n    let i18n_8;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      /**\r\n       * @suppress {msgDescriptions}\r\n       */\n      const MSG_EXTERNAL_6092221383139003691$$SRC_APP_PAGES_DASHBOARD_DASHBOARD_ONE_DASHBOARD_ONE_COMPONENT_TS_9 = goog.getMsg(\"Enfermedades por centro\");\n      i18n_8 = MSG_EXTERNAL_6092221383139003691$$SRC_APP_PAGES_DASHBOARD_DASHBOARD_ONE_DASHBOARD_ONE_COMPONENT_TS_9;\n    } else {\n      i18n_8 = $localize`Enfermedades por centro`;\n    }\n\n    return [[1, \"row\"], [1, \"col-12\"], [1, \"page-title-box\"], [1, \"page-title-right\"], [1, \"page-title\"], i18n_0, [1, \"card\"], [1, \"card-body\", \"pb-2\"], [1, \"float-end\", \"d-none\", \"d-md-inline-block\"], [1, \"btn-group\", \"mb-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-xs\", \"btn-light\"], i18n_2, i18n_4, [\"type\", \"button\", 1, \"btn\", \"btn-xs\", \"btn-secondary\"], i18n_6, [1, \"header-title\", \"mb-3\"], i18n_8, [\"dir\", \"ltr\"], [\"id\", \"sales-analytics\", 1, \"mt-4\"], [1, \"apex-charts\", 3, \"series\", \"chart\", \"plotOptions\", \"dataLabels\", \"yaxis\", \"legend\", \"grid\", \"fill\", \"colors\", \"labels\", \"xaxis\", \"stroke\"]];\n  },\n  template: function DashboardOneComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵtext(4, \" s \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"h4\", 4);\n      i0.ɵɵi18n(6, 5);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(7, \"div\", 0)(8, \"div\", 1)(9, \"div\", 6)(10, \"div\", 7)(11, \"div\", 8)(12, \"div\", 9)(13, \"button\", 10);\n      i0.ɵɵi18n(14, 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 10);\n      i0.ɵɵi18n(16, 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 13);\n      i0.ɵɵi18n(18, 14);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(19, \"h4\", 15);\n      i0.ɵɵi18n(20, 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\", 17)(22, \"div\", 18);\n      i0.ɵɵelement(23, \"apx-chart\", 19);\n      i0.ɵɵelementEnd()()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(23);\n      i0.ɵɵproperty(\"series\", ctx.salesAnalyticsChart.series)(\"chart\", ctx.salesAnalyticsChart.chart)(\"plotOptions\", ctx.salesAnalyticsChart.plotOptions)(\"dataLabels\", ctx.salesAnalyticsChart.dataLabels)(\"yaxis\", ctx.salesAnalyticsChart.yaxis)(\"legend\", ctx.salesAnalyticsChart.legend)(\"grid\", ctx.salesAnalyticsChart.grid)(\"fill\", ctx.salesAnalyticsChart.fill)(\"colors\", ctx.salesAnalyticsChart.colors)(\"labels\", ctx.salesAnalyticsChart.labels)(\"xaxis\", ctx.salesAnalyticsChart.xaxis)(\"stroke\", ctx.salesAnalyticsChart.stroke);\n    }\n  },\n  directives: [i3.ChartComponent],\n  styles: [\"\"]\n});","map":null,"metadata":{},"sourceType":"module"}
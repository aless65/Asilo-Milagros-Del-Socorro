// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Asilo.DataAccess;
using Asilo.Entities.Entities;

#nullable disable

namespace Asilo.DataAccess.Context
{
    public partial class AsilojacContext : DbContext
    {
        public AsilojacContext()
        {
        }

        public AsilojacContext(DbContextOptions<AsilojacContext> options)
            : base(options)
        {
        }

        public virtual DbSet<VW_tbActividades> VW_tbActividades { get; set; }
        public virtual DbSet<VW_tbAgendaDetalles> VW_tbAgendaDetalles { get; set; }
        public virtual DbSet<VW_tbAgendas> VW_tbAgendas { get; set; }
        public virtual DbSet<VW_tbCargos> VW_tbCargos { get; set; }
        public virtual DbSet<VW_tbCategoriasHabitaciones> VW_tbCategoriasHabitaciones { get; set; }
        public virtual DbSet<VW_tbCentros> VW_tbCentros { get; set; }
        public virtual DbSet<VW_tbDietas> VW_tbDietas { get; set; }
        public virtual DbSet<VW_tbDonaciones> VW_tbDonaciones { get; set; }
        public virtual DbSet<VW_tbEmpleados> VW_tbEmpleados { get; set; }
        public virtual DbSet<VW_tbEncargados> VW_tbEncargados { get; set; }
        public virtual DbSet<VW_tbEnfermedades> VW_tbEnfermedades { get; set; }
        public virtual DbSet<VW_tbEnfermedadesXResidente> VW_tbEnfermedadesXResidente { get; set; }
        public virtual DbSet<VW_tbExpedientes> VW_tbExpedientes { get; set; }
        public virtual DbSet<VW_tbHabitaciones> VW_tbHabitaciones { get; set; }
        public virtual DbSet<VW_tbHistorialExpedientes> VW_tbHistorialExpedientes { get; set; }
        public virtual DbSet<VW_tbHistorialPagos> VW_tbHistorialPagos { get; set; }
        public virtual DbSet<VW_tbMedicamentos> VW_tbMedicamentos { get; set; }
        public virtual DbSet<VW_tbMetodosPagos> VW_tbMetodosPagos { get; set; }
        public virtual DbSet<VW_tbMuertos> VW_tbMuertos { get; set; }
        public virtual DbSet<VW_tbParentescos> VW_tbParentescos { get; set; }
        public virtual DbSet<VW_tbProveedores> VW_tbProveedores { get; set; }
        public virtual DbSet<VW_tbResidentes> VW_tbResidentes { get; set; }
        public virtual DbSet<VW_tbTiposSangre> VW_tbTiposSangre { get; set; }
        public virtual DbSet<VW_tbUsuarios> VW_tbUsuarios { get; set; }
        public virtual DbSet<tbActividades> tbActividades { get; set; }
        public virtual DbSet<tbAgendaDetalles> tbAgendaDetalles { get; set; }
        public virtual DbSet<tbAgendas> tbAgendas { get; set; }
        public virtual DbSet<tbCargos> tbCargos { get; set; }
        public virtual DbSet<tbCategoriasHabitaciones> tbCategoriasHabitaciones { get; set; }
        public virtual DbSet<tbCentros> tbCentros { get; set; }
        public virtual DbSet<tbDepartamentos> tbDepartamentos { get; set; }
        public virtual DbSet<tbDietas> tbDietas { get; set; }
        public virtual DbSet<tbDonaciones> tbDonaciones { get; set; }
        public virtual DbSet<tbDonacionesXCentro> tbDonacionesXCentro { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEncargados> tbEncargados { get; set; }
        public virtual DbSet<tbEnfermedades> tbEnfermedades { get; set; }
        public virtual DbSet<tbEnfermedadesXResidente> tbEnfermedadesXResidente { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbExpedientes> tbExpedientes { get; set; }
        public virtual DbSet<tbHabitaciones> tbHabitaciones { get; set; }
        public virtual DbSet<tbHabitacionesXResidente> tbHabitacionesXResidente { get; set; }
        public virtual DbSet<tbHistorialExpedientes> tbHistorialExpedientes { get; set; }
        public virtual DbSet<tbHistorialPagos> tbHistorialPagos { get; set; }
        public virtual DbSet<tbInventarioPorCentro> tbInventarioPorCentro { get; set; }
        public virtual DbSet<tbMedicamentos> tbMedicamentos { get; set; }
        public virtual DbSet<tbMetodosPago> tbMetodosPago { get; set; }
        public virtual DbSet<tbMuertos> tbMuertos { get; set; }
        public virtual DbSet<tbMunicipios> tbMunicipios { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPantallasPorRoles> tbPantallasPorRoles { get; set; }
        public virtual DbSet<tbParentescos> tbParentescos { get; set; }
        public virtual DbSet<tbProveedores> tbProveedores { get; set; }
        public virtual DbSet<tbResidentes> tbResidentes { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbTiposSangre> tbTiposSangre { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<VW_tbActividades>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbActividades", "asil");

                entity.Property(e => e.acti_Class).HasMaxLength(500);

                entity.Property(e => e.acti_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.acti_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.acti_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbAgendaDetalles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbAgendaDetalles", "asil");

                entity.Property(e => e.acti_Class).HasMaxLength(500);

                entity.Property(e => e.acti_Nombre).HasMaxLength(100);

                entity.Property(e => e.agen_Nombre).HasMaxLength(300);

                entity.Property(e => e.agendeta_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.agendeta_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.agendeta_HoraEnd).HasMaxLength(500);

                entity.Property(e => e.agendeta_HoraStart)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.agendeta_Observaciones).HasMaxLength(500);

                entity.Property(e => e.medi_Nombre).HasMaxLength(300);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbAgendas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbAgendas", "asil");

                entity.Property(e => e.agen_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.agen_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.agen_Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.usuCrea)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usuModif).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbCargos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbCargos", "asil");

                entity.Property(e => e.carg_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.carg_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbCategoriasHabitaciones>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbCategoriasHabitaciones", "asil");

                entity.Property(e => e.cate_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.cate_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbCentros>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbCentros", "asil");

                entity.Property(e => e.cent_Direccion)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.cent_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.cent_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.cent_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.depa_Id)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre).HasMaxLength(80);

                entity.Property(e => e.usua_UsuCreacion_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbDietas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbDietas", "asil");

                entity.Property(e => e.diet_Almuerzo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.diet_Cena)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.diet_Desayuno)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.diet_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.diet_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.diet_Merienda)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.diet_Observaciones).HasMaxLength(500);

                entity.Property(e => e.diet_Restricciones).HasMaxLength(500);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbDonaciones>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbDonaciones", "asil");

                entity.Property(e => e.dona_Cantidad).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.dona_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.dona_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.dona_NombreDonante)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbEmpleados>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEmpleados", "asil");

                entity.Property(e => e.SexoDes)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.carg_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cent_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.depa_Id)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Correo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Direccion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empe_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Nacimiento).HasColumnType("date");

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.estacivi_Nombre).HasMaxLength(50);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.usuarioCrea)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usuarioModif).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbEncargados>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEncargados", "asil");

                entity.Property(e => e.enca_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.enca_Direccion)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.enca_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.enca_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.enca_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.enca_Nacimiento).HasColumnType("date");

                entity.Property(e => e.enca_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.enca_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.enca_SexoDesc)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.enca_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.estacivi_Nombre).HasMaxLength(50);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.nombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.pare_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.resi_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.resi_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbEnfermedades>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEnfermedades", "asil");

                entity.Property(e => e.enfe_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.enfe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.enfe_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbEnfermedadesXResidente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEnfermedadesXResidente", "asil");

                entity.Property(e => e.enfe_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.enferesi_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.enferesi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.resi_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbExpedientes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbExpedientes", "asil");

                entity.Property(e => e.expe_FechaApertura).HasColumnType("date");

                entity.Property(e => e.expe_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.expe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.expe_Fotografia).HasMaxLength(500);

                entity.Property(e => e.resi_NombreCompleto).HasMaxLength(401);

                entity.Property(e => e.tiposang_Nombre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbHabitaciones>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbHabitaciones", "asil");

                entity.Property(e => e.cate_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cent_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.habi_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.habi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.usuCrea)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usuModif).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbHistorialExpedientes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbHistorialExpedientes", "asil");

                entity.Property(e => e.empe_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.histexpe_FechaActualizacion).HasColumnType("date");

                entity.Property(e => e.histexpe_Observaciones)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<VW_tbHistorialPagos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbHistorialPagos", "asil");

                entity.Property(e => e.meto_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pago_Fecha).HasColumnType("date");

                entity.Property(e => e.pago_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pago_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.resi_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.usuCrea)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usuModif).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbMedicamentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbMedicamentos", "asil");

                entity.Property(e => e.medi_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.medi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.medi_Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.prov_Nombre).HasMaxLength(200);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbMetodosPagos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbMetodosPagos", "asil");

                entity.Property(e => e.meto_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.meto_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.meto_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.meto_NombreUsuarioCreacion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.meto_NombreUsuarioModificacion).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbMuertos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbMuertos", "asil");

                entity.Property(e => e.muer_Descripcion).HasMaxLength(500);

                entity.Property(e => e.muer_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.muer_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muer_FechaYHora).HasColumnType("datetime");

                entity.Property(e => e.resi_NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(401);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbParentescos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbParentescos", "asil");

                entity.Property(e => e.pare_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pare_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pare_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbProveedores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbProveedores", "asil");

                entity.Property(e => e.depa_Id)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.prov_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prov_Direccion)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.prov_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prov_Telefono)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbResidentes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbResidentes", "asil");

                entity.Property(e => e.SexoDes)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.agen_Nombre).HasMaxLength(300);

                entity.Property(e => e.cent_Nombre).HasMaxLength(200);

                entity.Property(e => e.diet_Almuerzo).HasMaxLength(500);

                entity.Property(e => e.diet_Cena).HasMaxLength(500);

                entity.Property(e => e.diet_Desayuno).HasMaxLength(500);

                entity.Property(e => e.diet_Merienda).HasMaxLength(500);

                entity.Property(e => e.diet_Observaciones).HasMaxLength(500);

                entity.Property(e => e.diet_Restricciones).HasMaxLength(500);

                entity.Property(e => e.empe_Apellidos).HasMaxLength(200);

                entity.Property(e => e.empe_NombreCompleto).HasMaxLength(401);

                entity.Property(e => e.empe_Nombres).HasMaxLength(200);

                entity.Property(e => e.estacivi_Nombre).HasMaxLength(50);

                entity.Property(e => e.expe_FechaApertura).HasColumnType("date");

                entity.Property(e => e.expe_Fotografia).HasMaxLength(500);

                entity.Property(e => e.resi_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.resi_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.resi_FechaIngreso).HasColumnType("date");

                entity.Property(e => e.resi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.resi_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.resi_Nacimiento).HasColumnType("date");

                entity.Property(e => e.resi_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.resi_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.tiposang_Nombre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.usuCrea).HasMaxLength(100);

                entity.Property(e => e.usuModif).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbTiposSangre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbTiposSangre", "asil");

                entity.Property(e => e.tiposang_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.tiposang_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.tiposang_Nombre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbUsuarios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbUsuarios", "acce");

                entity.Property(e => e.empe_Correo).HasMaxLength(200);

                entity.Property(e => e.empe_NombreCompleto).HasMaxLength(401);

                entity.Property(e => e.role_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_Contrasena).IsRequired();

                entity.Property(e => e.usua_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.usua_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.usua_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.usua_UsuCreacion_Nombre).HasMaxLength(100);

                entity.Property(e => e.usua_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<tbActividades>(entity =>
            {
                entity.HasKey(e => e.acti_Id)
                    .HasName("PK_asil_tbActividades_acti_Id");

                entity.ToTable("tbActividades", "asil");

                entity.HasIndex(e => e.acti_Nombre, "UQ_asil_tbActividades_enfe_Nombre")
                    .IsUnique();

                entity.Property(e => e.acti_Class).HasMaxLength(500);

                entity.Property(e => e.acti_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.acti_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.acti_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.acti_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.acti_UsuCreacionNavigation)
                    .WithMany(p => p.tbActividadesacti_UsuCreacionNavigation)
                    .HasForeignKey(d => d.acti_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbActividades_acce_tbUsuarios_enfe_UsuCreacion_usua_Id");

                entity.HasOne(d => d.acti_UsuModificacionNavigation)
                    .WithMany(p => p.tbActividadesacti_UsuModificacionNavigation)
                    .HasForeignKey(d => d.acti_UsuModificacion)
                    .HasConstraintName("FK_asil_tbActividades_acce_tbUsuarios_enfe_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbAgendaDetalles>(entity =>
            {
                entity.HasKey(e => e.agendeta_Id)
                    .HasName("PK_asil_tbAgendaDetalles_agendeta_Id");

                entity.ToTable("tbAgendaDetalles", "asil");

                entity.Property(e => e.agendeta_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.agendeta_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.agendeta_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.agendeta_HoraEnd).HasMaxLength(500);

                entity.Property(e => e.agendeta_HoraStart)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.agendeta_Observaciones).HasMaxLength(500);

                entity.HasOne(d => d.acti)
                    .WithMany(p => p.tbAgendaDetalles)
                    .HasForeignKey(d => d.acti_Id)
                    .HasConstraintName("FK_asil_tbAgendaDetalles_asil_tbActividades_acti_Id");

                entity.HasOne(d => d.agendeta_UsuCreacionNavigation)
                    .WithMany(p => p.tbAgendaDetallesagendeta_UsuCreacionNavigation)
                    .HasForeignKey(d => d.agendeta_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbAgendaDetalles_acce_tbUsuarios_agendeta_Id_UsuCreacion_usua_Id");

                entity.HasOne(d => d.agendeta_UsuModificacionNavigation)
                    .WithMany(p => p.tbAgendaDetallesagendeta_UsuModificacionNavigation)
                    .HasForeignKey(d => d.agendeta_UsuModificacion)
                    .HasConstraintName("FK_asil_tbAgendaDetalles_acce_tbUsuarios_agendeta_Id_UsuModificacion_usua_Id");

                entity.HasOne(d => d.medi)
                    .WithMany(p => p.tbAgendaDetalles)
                    .HasForeignKey(d => d.medi_Id)
                    .HasConstraintName("FK_asil_tbAgendaDetalles_asil_tbMedicamentos_medi_Id");
            });

            modelBuilder.Entity<tbAgendas>(entity =>
            {
                entity.HasKey(e => e.agen_Id)
                    .HasName("PK_asil_tbAgendas_agen_Id");

                entity.ToTable("tbAgendas", "asil");

                entity.HasIndex(e => e.agen_Nombre, "UQ_asil_tbAgendas_agen_Nombre")
                    .IsUnique();

                entity.Property(e => e.agen_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.agen_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.agen_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.agen_Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.agen_UsuCreacionNavigation)
                    .WithMany(p => p.tbAgendasagen_UsuCreacionNavigation)
                    .HasForeignKey(d => d.agen_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbAgendas_acce_tbUsuarios_agen_UsuCreacion_usua_Id");

                entity.HasOne(d => d.agen_UsuModificacionNavigation)
                    .WithMany(p => p.tbAgendasagen_UsuModificacionNavigation)
                    .HasForeignKey(d => d.agen_UsuModificacion)
                    .HasConstraintName("FK_asil_tbAgendas_acce_tbUsuarios_agen_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbCargos>(entity =>
            {
                entity.HasKey(e => e.carg_Id)
                    .HasName("PK_asil_tbCargos_carg_Id");

                entity.ToTable("tbCargos", "asil");

                entity.HasIndex(e => e.carg_Nombre, "UQ_asil_tbCargos_carg_Nombre")
                    .IsUnique();

                entity.Property(e => e.carg_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.carg_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.carg_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.carg_UsuCreacionNavigation)
                    .WithMany(p => p.tbCargoscarg_UsuCreacionNavigation)
                    .HasForeignKey(d => d.carg_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbCargos_acce_tbUsuarios_carg_UsuCreacion_usua_Id");

                entity.HasOne(d => d.carg_UsuModificacionNavigation)
                    .WithMany(p => p.tbCargoscarg_UsuModificacionNavigation)
                    .HasForeignKey(d => d.carg_UsuModificacion)
                    .HasConstraintName("FK_asil_tbCargos_acce_tbUsuarios_carg_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbCategoriasHabitaciones>(entity =>
            {
                entity.HasKey(e => e.cate_Id)
                    .HasName("PK_asil_tbCategoriasHabitaciones_cate_Id");

                entity.ToTable("tbCategoriasHabitaciones", "asil");

                entity.HasIndex(e => e.cate_Nombre, "UQ_asil_tbCategoriasHabitaciones_cate_Nombre")
                    .IsUnique();

                entity.Property(e => e.cate_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.cate_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.cate_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.cate_UsuCreacionNavigation)
                    .WithMany(p => p.tbCategoriasHabitacionescate_UsuCreacionNavigation)
                    .HasForeignKey(d => d.cate_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbCategoriasHabitaciones_acce_tbUsuarios_cate_UsuCreacion_usua_Id");

                entity.HasOne(d => d.cate_UsuModificacionNavigation)
                    .WithMany(p => p.tbCategoriasHabitacionescate_UsuModificacionNavigation)
                    .HasForeignKey(d => d.cate_UsuModificacion)
                    .HasConstraintName("FK_asil_tbCategoriasHabitaciones_acce_tbUsuarios_cate_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbCentros>(entity =>
            {
                entity.HasKey(e => e.cent_Id)
                    .HasName("PK_asil_tbCentros_cent_Id");

                entity.ToTable("tbCentros", "asil");

                entity.HasIndex(e => e.cent_Nombre, "UQ_asil_tbCentros_carg_Nombre")
                    .IsUnique();

                entity.Property(e => e.cent_Direccion)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.cent_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.cent_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cent_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.cent_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.cent_UsuCreacionNavigation)
                    .WithMany(p => p.tbCentroscent_UsuCreacionNavigation)
                    .HasForeignKey(d => d.cent_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbCentros_acce_tbUsuarios_cent_UsuCreacion_usua_Id");

                entity.HasOne(d => d.cent_UsuModificacionNavigation)
                    .WithMany(p => p.tbCentroscent_UsuModificacionNavigation)
                    .HasForeignKey(d => d.cent_UsuModificacion)
                    .HasConstraintName("FK_asil_tbCentros_acce_tbUsuarios_cent_UsuModificacion_usua_Id");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbCentros)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbCentros_gral_tbMunicipios_muni_Id");
            });

            modelBuilder.Entity<tbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.depa_Id)
                    .HasName("PK_gral_tbDepartamentos_depa_Id");

                entity.ToTable("tbDepartamentos", "gral");

                entity.Property(e => e.depa_Id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.depa_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.depa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.depa_UsuCreacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuCreacionNavigation)
                    .HasForeignKey(d => d.depa_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuCreacion_usua_Id");

                entity.HasOne(d => d.depa_UsuModificacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuModificacionNavigation)
                    .HasForeignKey(d => d.depa_UsuModificacion)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbDietas>(entity =>
            {
                entity.HasKey(e => e.diet_Id)
                    .HasName("PK_asil_tbDietas_diet_Id");

                entity.ToTable("tbDietas", "asil");

                entity.Property(e => e.diet_Almuerzo)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.diet_Cena)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.diet_Desayuno)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.diet_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.diet_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.diet_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.diet_Merienda)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.diet_Observaciones).HasMaxLength(500);

                entity.Property(e => e.diet_Restricciones).HasMaxLength(500);

                entity.HasOne(d => d.diet_UsuCreacionNavigation)
                    .WithMany(p => p.tbDietasdiet_UsuCreacionNavigation)
                    .HasForeignKey(d => d.diet_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbDietas_acce_tbUsuarios_diet_UsuCreacion_usua_Id");

                entity.HasOne(d => d.diet_UsuModificacionNavigation)
                    .WithMany(p => p.tbDietasdiet_UsuModificacionNavigation)
                    .HasForeignKey(d => d.diet_UsuModificacion)
                    .HasConstraintName("FK_asil_tbDietas_acce_tbUsuarios_diet_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbDonaciones>(entity =>
            {
                entity.HasKey(e => e.dona_Id)
                    .HasName("PK_asil_tbDonaciones_dona_Id");

                entity.ToTable("tbDonaciones", "asil");

                entity.Property(e => e.dona_Cantidad).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.dona_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.dona_Fecha).HasColumnType("date");

                entity.Property(e => e.dona_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.dona_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.dona_NombreDonante)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.HasOne(d => d.dona_UsuCreacionNavigation)
                    .WithMany(p => p.tbDonacionesdona_UsuCreacionNavigation)
                    .HasForeignKey(d => d.dona_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbDonaciones_acce_tbUsuarios_dona_UsuCreacion_usua_Id");

                entity.HasOne(d => d.dona_UsuModificacionNavigation)
                    .WithMany(p => p.tbDonacionesdona_UsuModificacionNavigation)
                    .HasForeignKey(d => d.dona_UsuModificacion)
                    .HasConstraintName("FK_asil_tbDonaciones_acce_tbUsuarios_dona_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbDonacionesXCentro>(entity =>
            {
                entity.HasKey(e => e.dona_Id)
                    .HasName("PK_asil_tbDonaciones_donacent_Id");

                entity.ToTable("tbDonacionesXCentro", "asil");

                entity.Property(e => e.dona_Id).ValueGeneratedNever();

                entity.Property(e => e.donacent_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.donacent_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.donacent_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.donacent_Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.donacent_UsuCreacionNavigation)
                    .WithMany(p => p.tbDonacionesXCentrodonacent_UsuCreacionNavigation)
                    .HasForeignKey(d => d.donacent_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbDonaciones_acce_tbUsuarios_donacent_UsuCreacion_usua_Id");

                entity.HasOne(d => d.donacent_UsuModificacionNavigation)
                    .WithMany(p => p.tbDonacionesXCentrodonacent_UsuModificacionNavigation)
                    .HasForeignKey(d => d.donacent_UsuModificacion)
                    .HasConstraintName("FK_asil_tbDonaciones_acce_tbUsuarios_donacent_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empe_Id)
                    .HasName("PK_asil_tbEmpleados_empe_Id");

                entity.ToTable("tbEmpleados", "asil");

                entity.HasIndex(e => e.empe_Identidad, "UQ_asil_tbEmpleados_empe_Identidad")
                    .IsUnique();

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Correo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Direccion)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.empe_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.empe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Nacimiento).HasColumnType("date");

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.carg)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.carg_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEmpleados_asil_tbCargos_carg_Id");

                entity.HasOne(d => d.cent)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.cent_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEmpleados_asil_tbCentros_cent_Id");

                entity.HasOne(d => d.empe_UsuCreacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuCreacionNavigation)
                    .HasForeignKey(d => d.empe_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEmpleados_acce_tbUsuarios_empe_UsuCreacion_usua_Id");

                entity.HasOne(d => d.empe_UsuModificacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuModificacionNavigation)
                    .HasForeignKey(d => d.empe_UsuModificacion)
                    .HasConstraintName("FK_asil_tbEmpleados_acce_tbUsuarios_empe_UsuModificacion_usua_Id");

                entity.HasOne(d => d.estacivi)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.estacivi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEmpleados_gral_tbEstadosCiviles_estacivi_Id");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEmpleados_gral_tbMunicipios_muni_Id");
            });

            modelBuilder.Entity<tbEncargados>(entity =>
            {
                entity.HasKey(e => e.enca_Id)
                    .HasName("PK_asil_tbEncargados_enca_Id");

                entity.ToTable("tbEncargados", "asil");

                entity.HasIndex(e => e.enca_Identidad, "UQ_asil_tbEncargados_enca_Identidad")
                    .IsUnique();

                entity.Property(e => e.enca_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.enca_Direccion)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.enca_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.enca_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.enca_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.enca_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.enca_Nacimiento).HasColumnType("date");

                entity.Property(e => e.enca_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.enca_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.enca_Telefono)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.enca_UsuCreacionNavigation)
                    .WithMany(p => p.tbEncargadosenca_UsuCreacionNavigation)
                    .HasForeignKey(d => d.enca_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEncargados_acce_tbUsuarios_enca_UsuCreacion_usua_Id");

                entity.HasOne(d => d.enca_UsuModificacionNavigation)
                    .WithMany(p => p.tbEncargadosenca_UsuModificacionNavigation)
                    .HasForeignKey(d => d.enca_UsuModificacion)
                    .HasConstraintName("FK_asil_tbEncargados_acce_tbUsuarios_enca_UsuModificacion_usua_Id");

                entity.HasOne(d => d.estacivi)
                    .WithMany(p => p.tbEncargados)
                    .HasForeignKey(d => d.estacivi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEncargados_gral_tbEstadosCiviles_estacivi_Id");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbEncargados)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEncargados_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.pare)
                    .WithMany(p => p.tbEncargados)
                    .HasForeignKey(d => d.pare_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEncargados_asil_tbParentescos_pare_Id");

                entity.HasOne(d => d.resi)
                    .WithMany(p => p.tbEncargados)
                    .HasForeignKey(d => d.resi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEncargados_asil_tbResidentes_resi_Id");
            });

            modelBuilder.Entity<tbEnfermedades>(entity =>
            {
                entity.HasKey(e => e.enfe_Id)
                    .HasName("PK_asil_tbEnfermedades_enfe_Id");

                entity.ToTable("tbEnfermedades", "asil");

                entity.HasIndex(e => e.enfe_Nombre, "UQ_asil_tbEnfermedades_enfe_Nombre")
                    .IsUnique();

                entity.Property(e => e.enfe_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.enfe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.enfe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.enfe_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.enfe_UsuCreacionNavigation)
                    .WithMany(p => p.tbEnfermedadesenfe_UsuCreacionNavigation)
                    .HasForeignKey(d => d.enfe_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbEnfermedades_acce_tbUsuarios_enfe_UsuCreacion_usua_Id");

                entity.HasOne(d => d.enfe_UsuModificacionNavigation)
                    .WithMany(p => p.tbEnfermedadesenfe_UsuModificacionNavigation)
                    .HasForeignKey(d => d.enfe_UsuModificacion)
                    .HasConstraintName("FK_asil_tbEnfermedades_acce_tbUsuarios_enfe_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbEnfermedadesXResidente>(entity =>
            {
                entity.HasKey(e => e.enferesi_Id)
                    .HasName("PK_acce_tbEnfermedadesXResidente_enferesi_Id");

                entity.ToTable("tbEnfermedadesXResidente", "asil");

                entity.Property(e => e.enferesi_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.enferesi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.enferesi_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.enfe)
                    .WithMany(p => p.tbEnfermedadesXResidente)
                    .HasForeignKey(d => d.enfe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbEnfermedadesXResidente_asil_tbEnfermedades_enfe_Id");

                entity.HasOne(d => d.resi)
                    .WithMany(p => p.tbEnfermedadesXResidente)
                    .HasForeignKey(d => d.resi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbEnfermedadesXResidente_asil_tbResidentes_resi_Id");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.estacivi_Id)
                    .HasName("PK_gral_tbEstadosCiviles");

                entity.ToTable("tbEstadosCiviles", "gral");

                entity.HasIndex(e => e.estacivi_Nombre, "UQ_asil_tbEstadosCiviles_estacivi_Nombre")
                    .IsUnique();

                entity.Property(e => e.estacivi_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.estacivi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.estacivi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.estacivi_Nombre).HasMaxLength(50);

                entity.HasOne(d => d.estacivi_UsuCreacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesestacivi_UsuCreacionNavigation)
                    .HasForeignKey(d => d.estacivi_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_acce_tbUsuarios_estacivi_UsuCreacion_usua_Id");

                entity.HasOne(d => d.estacivi_UsuModificacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesestacivi_UsuModificacionNavigation)
                    .HasForeignKey(d => d.estacivi_UsuModificacion)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_acce_tbUsuarios_estacivi_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbExpedientes>(entity =>
            {
                entity.HasKey(e => e.resi_Id)
                    .HasName("PK_asil_tbExpediente_expe_Id");

                entity.ToTable("tbExpedientes", "asil");

                entity.HasIndex(e => e.resi_Id, "UQ_asil_tbExpediente_resi_Id")
                    .IsUnique();

                entity.Property(e => e.resi_Id).ValueGeneratedNever();

                entity.Property(e => e.expe_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.expe_FechaApertura).HasColumnType("date");

                entity.Property(e => e.expe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.expe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.expe_Fotografia).HasMaxLength(500);

                entity.Property(e => e.expe_Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.expe_UsuCreacionNavigation)
                    .WithMany(p => p.tbExpedientesexpe_UsuCreacionNavigation)
                    .HasForeignKey(d => d.expe_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbExpediente_acce_tbUsuarios_expe_UsuCreacion_usua_Id");

                entity.HasOne(d => d.expe_UsuModificacionNavigation)
                    .WithMany(p => p.tbExpedientesexpe_UsuModificacionNavigation)
                    .HasForeignKey(d => d.expe_UsuModificacion)
                    .HasConstraintName("FK_asil_tbExpediente_acce_tbUsuarios_expe_UsuModificacion_usua_Id");

                entity.HasOne(d => d.tiposang)
                    .WithMany(p => p.tbExpedientes)
                    .HasForeignKey(d => d.tiposang_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbExpediente_asil_tbTipoSangre_tiposang_Id");
            });

            modelBuilder.Entity<tbHabitaciones>(entity =>
            {
                entity.HasKey(e => e.habi_Id)
                    .HasName("PK_asil_tbHabitaciones_habi_Id");

                entity.ToTable("tbHabitaciones", "asil");

                entity.Property(e => e.habi_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.habi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.habi_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.cate)
                    .WithMany(p => p.tbHabitaciones)
                    .HasForeignKey(d => d.cate_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHabitaciones_asil_tbCategoriasHabitaciones_cate_Id");

                entity.HasOne(d => d.cent)
                    .WithMany(p => p.tbHabitaciones)
                    .HasForeignKey(d => d.cent_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHabitaciones_asil_tbCentros_cent_Id");

                entity.HasOne(d => d.habi_UsuCreacionNavigation)
                    .WithMany(p => p.tbHabitacioneshabi_UsuCreacionNavigation)
                    .HasForeignKey(d => d.habi_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHabitaciones_acce_tbUsuarios_habi_UsuCreacion_usua_Id");

                entity.HasOne(d => d.habi_UsuModificacionNavigation)
                    .WithMany(p => p.tbHabitacioneshabi_UsuModificacionNavigation)
                    .HasForeignKey(d => d.habi_UsuModificacion)
                    .HasConstraintName("FK_asil_tbHabitaciones_acce_tbUsuarios_habi_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbHabitacionesXResidente>(entity =>
            {
                entity.HasKey(e => e.habiresi_Id)
                    .HasName("PK_asil_tbHabitacionesXResidente_habiresi_Id");

                entity.ToTable("tbHabitacionesXResidente", "asil");

                entity.Property(e => e.habiresi_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.habiresi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.habiresi_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.habi)
                    .WithMany(p => p.tbHabitacionesXResidente)
                    .HasForeignKey(d => d.habi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHabitacionesXResidente_asil_tbHabitaciones_habi_Id");

                entity.HasOne(d => d.habiresi_UsuCreacionNavigation)
                    .WithMany(p => p.tbHabitacionesXResidentehabiresi_UsuCreacionNavigation)
                    .HasForeignKey(d => d.habiresi_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHabitacionesXResidente_acce_tbUsuarios_habiresi_UsuCreacion_usua_Id");

                entity.HasOne(d => d.habiresi_UsuModificacionNavigation)
                    .WithMany(p => p.tbHabitacionesXResidentehabiresi_UsuModificacionNavigation)
                    .HasForeignKey(d => d.habiresi_UsuModificacion)
                    .HasConstraintName("FK_asil_tbHabitacionesXResidente_acce_tbUsuarios_habiresi_UsuModificacion_usua_Id");

                entity.HasOne(d => d.resi)
                    .WithMany(p => p.tbHabitacionesXResidente)
                    .HasForeignKey(d => d.resi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHabitacionesXResidente_asil_tbResidentes_resi_Id");
            });

            modelBuilder.Entity<tbHistorialExpedientes>(entity =>
            {
                entity.HasKey(e => e.histexpe_Id)
                    .HasName("PK_asil_tbHistorialExpedientes_histexpe_Id");

                entity.ToTable("tbHistorialExpedientes", "asil");

                entity.Property(e => e.histexpe_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.histexpe_FechaActualizacion).HasColumnType("date");

                entity.Property(e => e.histexpe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.histexpe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.histexpe_Observaciones)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbHistorialExpedientes)
                    .HasForeignKey(d => d.empe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHistorialExpedientes_asil_tbEmpleados_empe_Id");

                entity.HasOne(d => d.histexpe_UsuCreacionNavigation)
                    .WithMany(p => p.tbHistorialExpedienteshistexpe_UsuCreacionNavigation)
                    .HasForeignKey(d => d.histexpe_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHistorialExpedientes_acce_tbUsuarios_histexpe_UsuCreacion_usua_Id");

                entity.HasOne(d => d.histexpe_UsuModificacionNavigation)
                    .WithMany(p => p.tbHistorialExpedienteshistexpe_UsuModificacionNavigation)
                    .HasForeignKey(d => d.histexpe_UsuModificacion)
                    .HasConstraintName("FK_asil_tbHistorialExpedientes_acce_tbUsuarios_histexpe_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbHistorialPagos>(entity =>
            {
                entity.HasKey(e => e.pago_Id)
                    .HasName("PK_asil_tbHistorialPagos_pago_Id");

                entity.ToTable("tbHistorialPagos", "asil");

                entity.Property(e => e.pago_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pago_Fecha).HasColumnType("date");

                entity.Property(e => e.pago_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pago_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.meto)
                    .WithMany(p => p.tbHistorialPagos)
                    .HasForeignKey(d => d.meto_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHistorialPagos_asil_tbMetodosPago_meto_Id");

                entity.HasOne(d => d.pago_UsuCreacionNavigation)
                    .WithMany(p => p.tbHistorialPagospago_UsuCreacionNavigation)
                    .HasForeignKey(d => d.pago_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHistorialPagos_acce_tbUsuarios_pago_UsuCreacion_usua_Id");

                entity.HasOne(d => d.pago_UsuModificacionNavigation)
                    .WithMany(p => p.tbHistorialPagospago_UsuModificacionNavigation)
                    .HasForeignKey(d => d.pago_UsuModificacion)
                    .HasConstraintName("FK_asil_tbHistorialPagos_acce_tbUsuarios_pago_UsuModificacion_usua_Id");

                entity.HasOne(d => d.resi)
                    .WithMany(p => p.tbHistorialPagos)
                    .HasForeignKey(d => d.resi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbHistorialPagos_asil_tbResidentes_resi_Id");
            });

            modelBuilder.Entity<tbInventarioPorCentro>(entity =>
            {
                entity.HasKey(e => e.invecent_Id)
                    .HasName("PK_asil_tbInventarioPorCentro_invecent_Id");

                entity.ToTable("tbInventarioPorCentro", "asil");

                entity.Property(e => e.invecent_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.invecent_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.invecent_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.cent)
                    .WithMany(p => p.tbInventarioPorCentro)
                    .HasForeignKey(d => d.cent_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbInventarioPorCentro_asil_tbCentros_cent_Id");

                entity.HasOne(d => d.medi)
                    .WithMany(p => p.tbInventarioPorCentro)
                    .HasForeignKey(d => d.medi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbInventarioPorCentro_asil_tbMedicamentos_medi_Id");
            });

            modelBuilder.Entity<tbMedicamentos>(entity =>
            {
                entity.HasKey(e => e.medi_Id)
                    .HasName("PK_asil_tbMedicamentos_medi_Id");

                entity.ToTable("tbMedicamentos", "asil");

                entity.Property(e => e.medi_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.medi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.medi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.medi_Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.medi_UsuCreacionNavigation)
                    .WithMany(p => p.tbMedicamentosmedi_UsuCreacionNavigation)
                    .HasForeignKey(d => d.medi_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbMedicamentos_acce_tbUsuarios_medi_UsuCreacion_usua_Id");

                entity.HasOne(d => d.medi_UsuModificacionNavigation)
                    .WithMany(p => p.tbMedicamentosmedi_UsuModificacionNavigation)
                    .HasForeignKey(d => d.medi_UsuModificacion)
                    .HasConstraintName("FK_asil_tbMedicamentos_acce_tbUsuarios_medi_UsuModificacion_usua_Id");

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbMedicamentos)
                    .HasForeignKey(d => d.prov_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbMedicamentos_asil_tbProveedores_prov_Id");
            });

            modelBuilder.Entity<tbMetodosPago>(entity =>
            {
                entity.HasKey(e => e.meto_Id)
                    .HasName("PK_asil_tbMetodosPago_meto_Id");

                entity.ToTable("tbMetodosPago", "asil");

                entity.HasIndex(e => e.meto_Nombre, "UQ_asil_tbMetodosPago_meto_Nombre")
                    .IsUnique();

                entity.Property(e => e.meto_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.meto_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.meto_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.meto_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.meto_UsuCreacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UsuCreacionNavigation)
                    .HasForeignKey(d => d.meto_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbMetodosPago_acce_tbUsuarios_meto_UsuCreacion_usua_Id");

                entity.HasOne(d => d.meto_UsuModificacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UsuModificacionNavigation)
                    .HasForeignKey(d => d.meto_UsuModificacion)
                    .HasConstraintName("FK_asil_tbMetodosPago_acce_tbUsuarios_meto_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbMuertos>(entity =>
            {
                entity.HasKey(e => e.muer_Id)
                    .HasName("PK_asil_tbMuertos_muer_Id");

                entity.ToTable("tbMuertos", "asil");

                entity.Property(e => e.muer_Descripcion).HasMaxLength(500);

                entity.Property(e => e.muer_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.muer_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muer_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muer_FechaYHora).HasColumnType("datetime");

                entity.HasOne(d => d.muer_UsuCreacionNavigation)
                    .WithMany(p => p.tbMuertosmuer_UsuCreacionNavigation)
                    .HasForeignKey(d => d.muer_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbMuertos_acce_tbUsuarios_muer_UsuCreacion_usua_Id");

                entity.HasOne(d => d.muer_UsuModificacionNavigation)
                    .WithMany(p => p.tbMuertosmuer_UsuModificacionNavigation)
                    .HasForeignKey(d => d.muer_UsuModificacion)
                    .HasConstraintName("FK_asil_tbMuertos_acce_tbUsuarios_muer_UsuModificacion_usua_Id");

                entity.HasOne(d => d.resi)
                    .WithMany(p => p.tbMuertos)
                    .HasForeignKey(d => d.resi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbMuertos_asil_tbResidentes_resi_Id");
            });

            modelBuilder.Entity<tbMunicipios>(entity =>
            {
                entity.HasKey(e => e.muni_id)
                    .HasName("PK_gral_tbMunicipios_muni_Id");

                entity.ToTable("tbMunicipios", "gral");

                entity.Property(e => e.muni_id)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Id)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.HasOne(d => d.depa)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.depa_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_gral_tbDepartamentos_depa_Id");

                entity.HasOne(d => d.muni_UsuCreacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuCreacionNavigation)
                    .HasForeignKey(d => d.muni_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuCreacion_usua_Id");

                entity.HasOne(d => d.muni_UsuModificacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuModificacionNavigation)
                    .HasForeignKey(d => d.muni_UsuModificacion)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_Id)
                    .HasName("PK_acce_tbPantallas_pant_Id");

                entity.ToTable("tbPantallas", "acce");

                entity.Property(e => e.pant_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_Icon)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.pant_Menu)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_Url)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbPantallasPorRoles>(entity =>
            {
                entity.HasKey(e => e.pantrole_Id)
                    .HasName("PK_acce_tbPantallasPorRoles_pantrole_Id");

                entity.ToTable("tbPantallasPorRoles", "acce");

                entity.Property(e => e.pantrole_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pantrole_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pantrole_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pant)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.pant_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbPantallas_pant_Id");

                entity.HasOne(d => d.pantrole_UsuCreacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolespantrole_UsuCreacionNavigation)
                    .HasForeignKey(d => d.pantrole_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuCreacion_usua_Id");

                entity.HasOne(d => d.pantrole_UsuModificacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolespantrole_UsuModificacionNavigation)
                    .HasForeignKey(d => d.pantrole_UsuModificacion)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuModificacion_usua_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.role_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbRoles_role_Id");
            });

            modelBuilder.Entity<tbParentescos>(entity =>
            {
                entity.HasKey(e => e.pare_Id)
                    .HasName("PK_asil_tbParentescos_pare_Id");

                entity.ToTable("tbParentescos", "asil");

                entity.HasIndex(e => e.pare_Nombre, "UQ_asil_tbParentescos_pare_Nombre")
                    .IsUnique();

                entity.Property(e => e.pare_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pare_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pare_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pare_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.pare_UsuCreacionNavigation)
                    .WithMany(p => p.tbParentescospare_UsuCreacionNavigation)
                    .HasForeignKey(d => d.pare_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbParentescos_acce_tbUsuarios_pare_UsuCreacion_usua_Id");

                entity.HasOne(d => d.pare_UsuModificacionNavigation)
                    .WithMany(p => p.tbParentescospare_UsuModificacionNavigation)
                    .HasForeignKey(d => d.pare_UsuModificacion)
                    .HasConstraintName("FK_asil_tbParentescos_acce_tbUsuarios_pare_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbProveedores>(entity =>
            {
                entity.HasKey(e => e.prov_Id)
                    .HasName("PK_asil_tbProveedores_prov_Id");

                entity.ToTable("tbProveedores", "asil");

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.prov_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prov_Direccion)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.prov_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.prov_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prov_Telefono)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbProveedores)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbProveedores_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.prov_UsuCreacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuCreacionNavigation)
                    .HasForeignKey(d => d.prov_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbProveedores_acce_tbUsuarios_prov_UsuCreacion_usua_Id");

                entity.HasOne(d => d.prov_UsuModificacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuModificacionNavigation)
                    .HasForeignKey(d => d.prov_UsuModificacion)
                    .HasConstraintName("FK_asil_tbProveedores_acce_tbUsuarios_prov_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbResidentes>(entity =>
            {
                entity.HasKey(e => e.resi_Id)
                    .HasName("PK_asil_tbResidentes_carg_Id");

                entity.ToTable("tbResidentes", "asil");

                entity.HasIndex(e => e.resi_Identidad, "UQ_asil_tbResidentes_resi_Identidad")
                    .IsUnique();

                entity.Property(e => e.resi_Apellidos)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.resi_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.resi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.resi_FechaIngreso).HasColumnType("date");

                entity.Property(e => e.resi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.resi_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.resi_Nacimiento).HasColumnType("date");

                entity.Property(e => e.resi_Nombres)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.resi_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.agen)
                    .WithMany(p => p.tbResidentes)
                    .HasForeignKey(d => d.agen_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbResidentes_asil_tbAgendas_agen_Id");

                entity.HasOne(d => d.cent)
                    .WithMany(p => p.tbResidentes)
                    .HasForeignKey(d => d.cent_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbResidentes_asil_tbCentros_cent_Id");

                entity.HasOne(d => d.diet)
                    .WithMany(p => p.tbResidentes)
                    .HasForeignKey(d => d.diet_Id)
                    .HasConstraintName("FK_asil_tbResidentes_asil_tbDietas_diet_Id");

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbResidentes)
                    .HasForeignKey(d => d.empe_Id)
                    .HasConstraintName("FK_asil_tbResidentes_asil_tbEmpleados_empe_Id");

                entity.HasOne(d => d.estacivi)
                    .WithMany(p => p.tbResidentes)
                    .HasForeignKey(d => d.estacivi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbResidentes_gral_tbEstadosCiviles_estacivi_Id");

                entity.HasOne(d => d.resi_UsuCreacionNavigation)
                    .WithMany(p => p.tbResidentesresi_UsuCreacionNavigation)
                    .HasForeignKey(d => d.resi_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbResidentes_acce_tbUsuarios_resi_UsuCreacion_usua_Id");

                entity.HasOne(d => d.resi_UsuModificacionNavigation)
                    .WithMany(p => p.tbResidentesresi_UsuModificacionNavigation)
                    .HasForeignKey(d => d.resi_UsuModificacion)
                    .HasConstraintName("FK_asil_tbResidentes_acce_tbUsuarios_resi_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_Id)
                    .HasName("PK_acce_tbRoles_role_Id");

                entity.ToTable("tbRoles", "acce");

                entity.Property(e => e.role_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role_UsuCreacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuCreacionNavigation)
                    .HasForeignKey(d => d.role_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuCreacion_usua_Id");

                entity.HasOne(d => d.role_UsuModificacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuModificacionNavigation)
                    .HasForeignKey(d => d.role_UsuModificacion)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbTiposSangre>(entity =>
            {
                entity.HasKey(e => e.tiposang_Id)
                    .HasName("PK_asil_tbTiposSangre_tiposang_Id");

                entity.ToTable("tbTiposSangre", "asil");

                entity.HasIndex(e => e.tiposang_Nombre, "UQ_asil_tbTiposSangre_tiposang_Nombre")
                    .IsUnique();

                entity.Property(e => e.tiposang_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.tiposang_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.tiposang_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.tiposang_Nombre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.tiposang_UsuCreacionNavigation)
                    .WithMany(p => p.tbTiposSangretiposang_UsuCreacionNavigation)
                    .HasForeignKey(d => d.tiposang_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_asil_tbTiposSangre_acce_tbUsuarios_tiposang_UsuCreacion_usua_Id");

                entity.HasOne(d => d.tiposang_UsuModificacionNavigation)
                    .WithMany(p => p.tbTiposSangretiposang_UsuModificacionNavigation)
                    .HasForeignKey(d => d.tiposang_UsuModificacion)
                    .HasConstraintName("FK_asil_tbTiposSangre_acce_tbUsuarios_tiposang_UsuModificacion_usua_Id");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.usua_Id)
                    .HasName("PK_acce_tbUsuarios_usua_Id");

                entity.ToTable("tbUsuarios", "acce");

                entity.Property(e => e.usua_Contrasena).IsRequired();

                entity.Property(e => e.usua_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.usua_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.usua_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.usua_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.role_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbRoles_role_Id");

                entity.HasOne(d => d.usua_UsuCreacionNavigation)
                    .WithMany(p => p.Inverseusua_UsuCreacionNavigation)
                    .HasForeignKey(d => d.usua_UsuCreacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_usua_UsuCreacion_usua_Id");

                entity.HasOne(d => d.usua_UsuModificacionNavigation)
                    .WithMany(p => p.Inverseusua_UsuModificacionNavigation)
                    .HasForeignKey(d => d.usua_UsuModificacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_usua_UsuModificacion_usua_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}